<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://seedstack.org/archives/16.7/tags/template/index.xml</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://seedstack.org/archives/16.7/tags/template/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom parsers</title>
      <link>http://seedstack.org/archives/16.7/addons/io/custom-parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/io/custom-parsers/</guid>
      <description>

&lt;p&gt;If available parsers don&amp;rsquo;t fit your needs, the IO add-on provide an SPI for custom parsers. There are three options to
provide your own parser: static template, dynamic template or without template.&lt;/p&gt;

&lt;h1 id=&#34;static-template&#34;&gt;Static template&lt;/h1&gt;

&lt;p&gt;In this case, templates are loaded from files within the &lt;code&gt;META-INF/templates&lt;/code&gt; directory. You need to extend three classes:
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseStaticTemplateLoader&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseStaticTemplateLoader.html&#39;&gt;AbstractBaseStaticTemplateLoader&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseTemplate&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseTemplate.html&#39;&gt;AbstractBaseTemplate&lt;/a&gt;&lt;/code&gt; and
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractTemplateParser&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractTemplateParser.html&#39;&gt;AbstractTemplateParser&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The template loader loads the template from the corresponding resource in &lt;code&gt;META-INF/templates&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;The template have all information necessary to parse a file.&lt;/li&gt;
&lt;li&gt;The parser is able to parse an InputStream and produce a model, using the template information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;dynamic-template&#34;&gt;Dynamic template&lt;/h1&gt;

&lt;p&gt;In the case of a dynamic template, your loader will completely handle the loading logic. Implement the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;TemplateLoader&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/TemplateLoader.html&#39;&gt;TemplateLoader&lt;/a&gt;&lt;/code&gt;
interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyDynamicTemplateLoader implements TemplateLoader&amp;lt;MyTemplate&amp;gt; {

    @Override
    public MyTemplate load(String name) throws Exception {
        // Gets your template from anywhere
        return myTemplate
    }

    @Override
    Set&amp;lt;String&amp;gt; names() {
        // Returns all the templates you know
        return names;
    }

    @Override
    boolean contains(String name) {
        // Checks if you know this template
        return bool;
    }

    @Override
    public String templateRenderer() {
        // Returns the name of the associated renderer if exists, null otherwise
        return &amp;quot;MyTemplateRenderer&amp;quot;;
    }

    @Override
    public String templateParser() {
        // Returns the name of the associated parser
        return &amp;quot;MyTemplateParser&amp;quot;;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;without-template&#34;&gt;Without template&lt;/h1&gt;

&lt;p&gt;A parser without template doesn&amp;rsquo;t need any information to parse the model. It is often the case of specific parsers
that are not meant to be reusable. Extend &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseParser&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseParser.html&#39;&gt;AbstractBaseParser&lt;/a&gt;&lt;/code&gt; and annotate it
with &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;inject.&amp;amp;#8203;Named&#39;&gt;@Named&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Named(&amp;quot;custom&amp;quot;)
public class CustomParser&amp;lt;PARSED_OBJECT&amp;gt; extends AbstractBaseParser&amp;lt;PARSED_OBJECT&amp;gt; {

    public CustomParser() {
    }

    @Override
    public List&amp;lt;PARSED_OBJECT&amp;gt; parse(InputStream inputStream, Class&amp;lt;PARSED_OBJECT&amp;gt; clazz) {
        List&amp;lt;PARSED_OBJECT&amp;gt; beans = new ArrayList&amp;lt;PARSED_OBJECT&amp;gt;();
        return beans;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can inject it as usual:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Parse(&amp;quot;custom&amp;quot;)
Parser parser;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Custom renderers</title>
      <link>http://seedstack.org/archives/16.7/addons/io/custom-renderers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/io/custom-renderers/</guid>
      <description>

&lt;p&gt;If available renderers don&amp;rsquo;t fit your needs, the IO add-on provides an SPI to register your custom renderers. There are
three options to provide your own renderer: static template, dynamic template or without template.&lt;/p&gt;

&lt;h1 id=&#34;static-template&#34;&gt;Static template&lt;/h1&gt;

&lt;p&gt;In this case, templates are loaded from files within the &lt;code&gt;META-INF/templates&lt;/code&gt; directory. You need to extend three classes:
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseStaticTemplateLoader&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseStaticTemplateLoader.html&#39;&gt;AbstractBaseStaticTemplateLoader&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseTemplate&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseTemplate.html&#39;&gt;AbstractBaseTemplate&lt;/a&gt;&lt;/code&gt; and
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractTemplateRenderer&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractTemplateRenderer.html&#39;&gt;AbstractTemplateRenderer&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The template loader loads the template from the corresponding resource in &lt;code&gt;META-INF/templates&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;The template have all information necessary to render a model.&lt;/li&gt;
&lt;li&gt;The renderer is able to render a model into an OutputStream, using the template information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;dynamic-template&#34;&gt;Dynamic template&lt;/h1&gt;

&lt;p&gt;In the case of a dynamic template, your loader will completely handle the loading logic. Implement the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;TemplateLoader&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/TemplateLoader.html&#39;&gt;TemplateLoader&lt;/a&gt;&lt;/code&gt;
interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyDynamicTemplateLoader implements TemplateLoader&amp;lt;MyTemplate&amp;gt; {

    @Override
    public MyTemplate load(String name) throws Exception {
        // Gets your template from anywhere
        return myTemplate
    }

    @Override
    Set&amp;lt;String&amp;gt; names() {
        // Returns all the templates you know
        return names;
    }

    @Override
    boolean contains(String name) {
        // Checks if you know this template
        return bool;
    }

    @Override
    public String templateRenderer() {
        // Returns the name of the associated renderer
        return &amp;quot;MyTemplateRenderer&amp;quot;;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;without-template&#34;&gt;Without template&lt;/h1&gt;

&lt;p&gt;A renderer without template doesn&amp;rsquo;t need any information to render the model. It is often the case of specific renderers
that are not meant to be reusable. Extend &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;io.&amp;amp;#8203;spi.&amp;amp;#8203;AbstractBaseRenderer&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/io/spi/AbstractBaseRenderer.html&#39;&gt;AbstractBaseRenderer&lt;/a&gt;&lt;/code&gt; and annotate it
with &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;inject.&amp;amp;#8203;Named&#39;&gt;@Named&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Named(&amp;quot;custom&amp;quot;)
public class CustomRenderer extends AbstractBaseRenderer {

    public CustomRenderer() {
    }

    @Override
    public void render(OutputStream outputStream, Object model) {
        render(outputStream, model, null, null);
    }

    @Override
    public void render(OutputStream outputStream, Object model, String mimeType, Map&amp;lt;String, Object&amp;gt; parameters) {
        try {
            outputStream.write(&amp;quot;Hello World!&amp;quot;.getBytes());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can inject it as usual:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Renderer(&amp;quot;custom&amp;quot;)
Renderer renderer;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>http://seedstack.org/archives/16.7/docs/w20/manual/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/w20/manual/routing/</guid>
      <description>&lt;p&gt;W20 provides a declarative syntax to register AngularJS routes in your application. It is done through the &lt;code&gt;routes&lt;/code&gt; section
of fragment manifests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;routes&amp;quot;: {
    &amp;quot;/route1&amp;quot;: {
        ...
    },
    &amp;quot;/route2&amp;quot;: {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;application&lt;/code&gt; module will process the &lt;code&gt;routes&lt;/code&gt; section of all fragments and register the valid routes in the AngularJS
routing system. The two components of a W20 route definition are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The route paths which are specified by the keys of the &lt;code&gt;routes&lt;/code&gt; object. To ensure route uniqueness in an application,
the fragment identifier is used as a route path prefix. For example, if the fragment identifier is &lt;code&gt;fragment1&lt;/code&gt; the full
route path registered in AngularJS routing for &lt;code&gt;/route1&lt;/code&gt; is &lt;code&gt;/fragment1/route1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The route definitions which are specified as an object for each route path. Every options of the AngularJS route object
can be configured, the most common one being the &lt;code&gt;templateUrl&lt;/code&gt; and the &lt;code&gt;controller&lt;/code&gt; associated to the view.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;routes&amp;quot;: {
     &amp;quot;/route1&amp;quot;: {
       &amp;quot;templateUrl&amp;quot;: &amp;quot;{fragment-id}/views/route1Template.html&amp;quot;,
       &amp;quot;controller&amp;quot;: &amp;quot;route1Controller&amp;quot;
     }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;The route definition object specifies the contents and behavior of the view that will be displayed inside the HTML tag
containing the &lt;code&gt;ngView&lt;/code&gt; attribute. To learn more about AngularJS routing, please check
&lt;a href=&#34;https://docs.angularjs.org/api/ngRoute/provider/$routeProvider&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;route-types&#34;&gt;Route types&lt;/h1&gt;

&lt;p&gt;A route definition should contain a &lt;code&gt;type&lt;/code&gt; attribute. If it is not present, a route type of &lt;code&gt;view&lt;/code&gt; is assumed which is
a standard AngularJS route. Two route types are available out-of-the-box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;view&lt;/code&gt; route is a standard AngularJS route, which is minimally processed by W20. If it contains a &lt;code&gt;templateUrl&lt;/code&gt;, its
value is resolved into a full URL by the RequireJS function &lt;code&gt;toUrl()&lt;/code&gt;. As such, every fragment alias (like &lt;code&gt;{fragment1}&lt;/code&gt;)
is resolved.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;sandbox&lt;/code&gt; route type is a W20-specific route type which encapsulate the page denoted by the &lt;code&gt;url&lt;/code&gt; attribute into an
iframe. It is useful to add any pre-existing HTML pages into a W20 application such as legacy application screens. The
&lt;code&gt;url&lt;/code&gt; attribute is resolved into a full URL by the RequireJS function &lt;code&gt;toUrl()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any custom route type can be registered by using the &lt;code&gt;registerRouteHandler()&lt;/code&gt; function of the &lt;code&gt;application&lt;/code&gt; module public
definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define([
    &#39;{w20-core}/modules/application&#39;
], function(application) {
    ...

    application.registerRouteHandler(&#39;myCustomType&#39;, function (route) {
        // analyze and transform the route object here        

        return route;
    });

    ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The handler will be invoked for each detected route of type &lt;code&gt;myCustomType&lt;/code&gt;. It is required that the returned route
object is a valid AngularJS route definition.&lt;/p&gt;

&lt;h1 id=&#34;hidden-routes&#34;&gt;Hidden routes&lt;/h1&gt;

&lt;p&gt;You can hide a route from the menu by setting the &lt;code&gt;hidden&lt;/code&gt; attribute to &lt;code&gt;true&lt;/code&gt; in the route definition object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;routes&amp;quot;: {
     &amp;quot;/route1&amp;quot;: {
         &amp;quot;hidden&amp;quot;: true
     }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;categorizing-routes&#34;&gt;Categorizing routes&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;category&lt;/code&gt; attribute can be used to define a category for the route which will often be rendered as a section or folder in graphical themes. The category name supports hierarchical categories separated with dots:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;quot;routes&amp;quot;: {
     &amp;quot;/route1&amp;quot;: {
         &amp;quot;category&amp;quot;: &amp;quot;a.b.c&amp;quot;
     }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will put the &lt;code&gt;route1&lt;/code&gt; route in the &lt;code&gt;c&lt;/code&gt; sub-category of &lt;code&gt;b&lt;/code&gt; which is itself a sub-category of category &lt;code&gt;a&lt;/code&gt;. The special category name &lt;code&gt;__top&lt;/code&gt; define the route as a top-level route (without category). It is the default value of this attribute.&lt;/p&gt;

&lt;h1 id=&#34;additional-route-metadata&#34;&gt;Additional route metadata&lt;/h1&gt;

&lt;p&gt;Additional attributes can be attached to route definition and will be ignored by AngularJS. When retrieving the route through
the AngularJS &lt;code&gt;$route&lt;/code&gt; service, these attributes will be preserved, allow for further processing during the execution
of the application.&lt;/p&gt;

&lt;h2 id=&#34;w20-route-metadata&#34;&gt;W20 route metadata&lt;/h2&gt;

&lt;p&gt;W20 adds a limited set of attributes on all routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: the type attribute is automatically added if not present (with the &lt;code&gt;view&lt;/code&gt; value),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;: the full path of the route,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt;: the category of the route (which can be used to classify the routes for navigation) is added with a default value of &lt;code&gt;__top&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i18n&lt;/code&gt;: the i18n key for the route name is added with a default value of &lt;code&gt;application.view.normalized.route.path&lt;/code&gt;. Path
normalization consists of replacing slashes with dots. As such, the &lt;code&gt;/fragment1/route1&lt;/code&gt; fragments will have a default i18n
key of &lt;code&gt;application.view.fragment1.route1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolve&lt;/code&gt;: a resolve object will be added to check for route security and for any additional custom check defined by the
&lt;code&gt;check&lt;/code&gt; attribute on the route definition (which must reference by name a custom check function registered with AngularJS
injector through a &lt;code&gt;module.value(&#39;myCheck&#39;, function checkFn() { ... });&lt;/code&gt; and returning a promise). The routing is suspended
until the promise is resolved (or rejected).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;custom-metadata&#34;&gt;Custom metadata&lt;/h2&gt;

&lt;p&gt;Any additional metadata can be added to the route for custom purposes, but be aware to not interfere with W20 route metadata
as any custom attribute of the same name will be overwritten before any custom route handler is called.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>