<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://seedstack.org/archives/16.7/tags/persistence/index.xml</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://seedstack.org/archives/16.7/tags/persistence/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/mongodb/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/mongodb/</guid>
      <description>

&lt;p&gt;SeedStack MongoDB add-on enables your application to connect with MongoDB instances.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-mongodb-mongodb-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-mongodb-mongodb-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-addons-mongodb-mongodb-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.addons.mongodb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mongodb&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-addons-mongodb-mongodb-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-addons-mongodb-mongodb-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-addons-mongodb-mongodb-show&#34; onclick=&#34;$(&#39;#org-seedstack-addons-mongodb-mongodb-version, #org-seedstack-addons-mongodb-mongodb-warn&#39;).show(); $(&#39;#org-seedstack-addons-mongodb-mongodb-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-addons-mongodb-mongodb-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.addons.mongodb:mongodb:1.1.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You also need to add the MongoDB Java client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mongo-java-driver&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can choose to use the MongoDB asynchronous client instead (or in addition as you can mix asynchronous and synchronous
clients in the same application):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mongodb-driver-async&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;MongoDB clients are used to access databases and are declared with the following configuration property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb]
clients = client1, client2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each client must then be configured separately with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
# configuration of client1 

[org.seedstack.mongodb.client.client2]
# configuration of client2
 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;As MongoDB has a different Java driver for synchronous and asynchronous clients, the type of a client will determine how
it can be configured and used. Clients use the &lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.0/driver/&#34;&gt;synchronous driver&lt;/a&gt;
by default, to switch to the &lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.0/driver-async/&#34;&gt;asynchronous driver&lt;/a&gt;, specify
the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
async = true
&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;uri-connection-string&#34;&gt;URI connection string&lt;/h2&gt;

&lt;p&gt;A client can be configured with an URI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
uri = mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;URI allows to directly specify a set of options common to synchronous and asynchronous clients. More information about
the URI and its options can be found &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;explicit-hosts&#34;&gt;Explicit hosts&lt;/h2&gt;

&lt;p&gt;As an alternative a client can be configured by directly specifying the MongoDB host(s):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
hosts = host1:27017, host2     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the client options must be specified using additional properties, which a are different for synchronous and
asynchronous clients. See the &lt;a href=&#34;#synchronous-client-options&#34;&gt;Synchronous client options&lt;/a&gt; and &lt;a href=&#34;#asynchronous-client-options&#34;&gt;Asynchronous client options&lt;/a&gt;
sections below for more information.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;When no port is specified, whether in the URI or in the hosts property, the default MongoDB port is used (27017).&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When configuring the connection with explicit hosts, connection credentials can be specified as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...    
credentials = db1:user1:password1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will authenticate with the username &lt;code&gt;user1&lt;/code&gt; and the password &lt;code&gt;password1&lt;/code&gt;. The user will be lookup up in the &lt;code&gt;db1&lt;/code&gt;
database. The authentication mechanism will be automatically selected. To force an authentication mechanism use the
following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...    
credentials = mechanism/db1:user1:password1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The available authentication mechanisms are &lt;code&gt;PLAIN&lt;/code&gt;, &lt;code&gt;MONGODB_CR&lt;/code&gt;, &lt;code&gt;SCRAM_SHA_1&lt;/code&gt;, &lt;code&gt;MONGODB_X509&lt;/code&gt; and &lt;code&gt;GSSAPI&lt;/code&gt;. You can
specify multiple credentials like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...    
credentials = mechanism/db1:user1:password1, mechanism/db2:user2:password2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;It is recommended to avoid specifying the authentication mechanism as it will be automatically selected. Also note that
often, only one credential is enough.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;databases&#34;&gt;Databases&lt;/h2&gt;

&lt;p&gt;You can choose to inject and use the &lt;code&gt;MongoClient&lt;/code&gt; object(s) directly and access the database(s) programatically. As a
convenience, Seed also allows to inject the &lt;code&gt;MongoDatabase&lt;/code&gt; object(s) with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...
databases = db1, db2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each declared database can then be injected accordingly. See the &lt;a href=&#34;#usage&#34;&gt;usage&lt;/a&gt; section below for more information.&lt;br /&gt;
Database names must be unique across the application so you can encounter a situation when multiple configured clients
may need to access databases with the same name. In that case, you can use the alias feature. Consider the following clients:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...    
databases = db1, db2

[org.seedstack.mongodb.client.client2]
...    
databases = db2, db3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can note that a database named &lt;code&gt;db2&lt;/code&gt; exists in MongoDB instances accessed by both &lt;code&gt;client1&lt;/code&gt; and &lt;code&gt;client2&lt;/code&gt;. To resolve
this ambiguity, one of the &lt;code&gt;db2&lt;/code&gt; databases must be aliased in the application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client2]
...    
databases = db2, db3
alias.db2 = db2bis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the &lt;code&gt;db2&lt;/code&gt; database present on the MongoDB instance accessed by &lt;code&gt;client2&lt;/code&gt; will be referred in the
application by the &lt;code&gt;db2bis&lt;/code&gt; name. Note that you can use this feature even when there are no name collision.&lt;/p&gt;

&lt;h2 id=&#34;synchronous-client-options&#34;&gt;Synchronous client options&lt;/h2&gt;

&lt;p&gt;Additional options can be specified on synchronous clients with the &lt;code&gt;option&lt;/code&gt; prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...
option.optionName1 = value1
option.optionName2 = value2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the options from the &lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/MongoClientOptions.Builder.html&#34;&gt;MongoClientOptions.Builder&lt;/a&gt;
class are available. Each method of the builder translates to an option of the same name. Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...
option.connectionsPerHost = 75
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will invoke the &lt;code&gt;connectionsPerHost()&lt;/code&gt; method on the option builder with the value &lt;code&gt;75&lt;/code&gt; converted to an integer.&lt;/p&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If you use a URI configuration, you can combine the URI options with the &lt;code&gt;option.*&lt;/code&gt; syntax. The specified option(s)
will complement their URI counterpart and override them if present in both.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;asynchronous-client-options&#34;&gt;Asynchronous client options&lt;/h2&gt;

&lt;p&gt;Additional options can be specified on asynchronous clients with the &lt;code&gt;setting&lt;/code&gt; prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb.client.client1]
...
setting.settingNamespace1.settingName1 = value1
setting.settingNamespace1.settingName2 = value2
setting.settingNamespace2.settingName3 = value3
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the settings from the &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; builder and its sub-builders are available. Each sub-builder translates
to a setting namespace and each of the builders method translates to a particular setting. The list of the builders and
their corresponding namespace is:&lt;/p&gt;

&lt;table class=&#34;table table-striped&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
    &lt;th&gt;Namespace&lt;/th&gt;
    &lt;th&gt;Builder&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;cluster&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/ClusterSettings.Builder.html&#34;&gt;ClusterSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;connectionPool&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/ConnectionPoolSettings.Builder.html&#34;&gt;ConnectionPoolSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;socket&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/SocketSettings.Builder.html&#34;&gt;SocketSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;heartbeatSocket&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/SocketSettings.Builder.html&#34;&gt;SocketSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;server&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/ServerSettings.Builder.html&#34;&gt;ServerSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;ssl&lt;/td&gt;
    &lt;td&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/connection/SslSettings.Builder.html&#34;&gt;SslSettings.Builder&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;setting.connectionPool.maxSize = 75
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will invoke the &lt;code&gt;maxSize()&lt;/code&gt; method on a &lt;code&gt;ConnectionPoolSettings.Builder&lt;/code&gt; instance with the value &lt;code&gt;75&lt;/code&gt; converted to
an integer. This builder instance will in turn be be set on a &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; instance via the &lt;code&gt;connectionPoolSettings()&lt;/code&gt;
method.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;The global settings directly available on &lt;code&gt;MongoClientSettings.Builder&lt;/code&gt; can be specified without namespace. More information
on the global builder &lt;a href=&#34;http://api.mongodb.org/java/current/com/mongodb/async/client/MongoClientSettings.Builder.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cluster.hosts&lt;/code&gt; and &lt;code&gt;credentialList&lt;/code&gt; settings are ignored since they are already mapped from the &lt;code&gt;hosts&lt;/code&gt; and the
&lt;code&gt;credentials&lt;/code&gt; properties.&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;As MongoDB doesn&amp;rsquo;t support transactions, usage simply consists in injecting a &lt;code&gt;MongoClient&lt;/code&gt; or a &lt;code&gt;MongoDatabase&lt;/code&gt; object
and using it accordingly to the MongoDB documentation. As an example you can inject the client as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
@Named(&amp;quot;client1&amp;quot;)
MongoClient client1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will inject the configured MongoDB client named &lt;code&gt;client1&lt;/code&gt;. You can also inject a database directly as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
@Named(&amp;quot;db1&amp;quot;)
MongoDatabase db1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will inject the configured MongoDB database named &lt;code&gt;db1&lt;/code&gt;. Note that you must use the aliased name instead of the
real database name if you aliased it in the configuration (see the &lt;a href=&#34;#databases&#34;&gt;databases&lt;/a&gt; section for information
about aliases).&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If your client or database is configured as synchronous (the default) you must use the &lt;code&gt;com.mongodb.MongoClient&lt;/code&gt; and
&lt;code&gt;com.mongodb.client.MongoDatabase&lt;/code&gt; classes. If your client or database is configured as asynchronous, you must use the
&lt;code&gt;com.mongodb.async.client.MongoClient&lt;/code&gt; and &lt;code&gt;com.mongodb.async.client.MongoDatabase&lt;/code&gt; classes instead.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;You can inject a client or a database without any &lt;code&gt;@Named&lt;/code&gt; qualifier as long as there is only one client or only one database
of the injected type configured.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;morphia&#34;&gt;Morphia&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt; is an Object document mapper Api. it Provides Annotation-based Java objects
mapping, and fluent query/update API&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;SeedStack Morphia add-on enables your application to connect and interact with MongoDB instances only by injecting and
using a Morphia &lt;code&gt;Datastore&lt;/code&gt;.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-mongodb-mongodb-morphia-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-mongodb-mongodb-morphia-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-addons-mongodb-mongodb-morphia-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.addons.mongodb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mongodb-morphia&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-addons-mongodb-mongodb-morphia-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-addons-mongodb-mongodb-morphia-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-addons-mongodb-mongodb-morphia-show&#34; onclick=&#34;$(&#39;#org-seedstack-addons-mongodb-mongodb-morphia-version, #org-seedstack-addons-mongodb-mongodb-morphia-warn&#39;).show(); $(&#39;#org-seedstack-addons-mongodb-mongodb-morphia-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-addons-mongodb-mongodb-morphia-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.addons.mongodb:mongodb-morphia:1.1.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h2 id=&#34;configuration-1&#34;&gt;Configuration&lt;/h2&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;
Morphia Datastores need synchronous mongodb databases, please refer to mongodb &lt;a href=&#34;#asynchronous-client-options&#34;&gt;synchronous client&lt;/a&gt;
and &lt;a href=&#34;#Databases&#34;&gt;database&lt;/a&gt; configuration before starting with morphia.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Seed has the ability to create a new Morphia &lt;code&gt;Datastore&lt;/code&gt; linked to single Morphia mapped objects or java packages.
Two &lt;code&gt;morphia&lt;/code&gt; properties &lt;code&gt;clientName&lt;/code&gt; and &lt;code&gt;dbName&lt;/code&gt; are available and can be set using Seed object props configuration
as followed:&lt;/p&gt;

&lt;p&gt;Required Mongodb configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb]
clients = client1

[org.seedstack.mongodb.client.client1]
hosts = localhost
option.connectionsPerHost = 50
databases = db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Datastore linked to a single Morphia mapped object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.mycompany.myapp.domain.user.*]
morphia.clientName = client1
morphia.dbName = db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Datastore linked to Morphia mapped objects in a package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.mycompany.myapp.domain.user.User]
morphia.clientName = client1
morphia.dbName = db1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage-1&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Configuration for affecting a package to a &lt;code&gt;Datastore&lt;/code&gt; linked to the database &lt;code&gt;db1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.mongodb]
clients = client1

[org.seedstack.mongodb.client.client1]
hosts = localhost
option.connectionsPerHost = 50
databases = db1

[org.mycompany.myapp.domain.user.*]
morphia.clientName = client1
morphia.dbName = db1
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Morphia only support synchronous client, as so the Mongodb database must be synchronous.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Mapping Object under the package defined above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Entity
public class User implements AggregateRoot&amp;lt;Long&amp;gt;{
	@Id
	private long id;
	private String name;
	private String lastname;
    @Embedded    
    private Address address;
    
	// ...
}
@Embedded
public class Address implements ValueObject{
	private String country;
	private String zipcode;
	private String city;
	private String street;
	private Integer number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Morphia &lt;code&gt;Datastore&lt;/code&gt; can be injected simply by specifying the associated &lt;code&gt;morphia.clientName&lt;/code&gt; and &lt;code&gt;morphia.dbName&lt;/code&gt; with
the appropriate binding annotation &lt;code&gt;@MorphiaDatastore&lt;/code&gt; as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MorphiaIT extends AbstractSeedIT{
	@Inject
	@MorphiaDatastore(clientName = &amp;quot;client1&amp;quot;,dbName=&amp;quot;db1&amp;quot;)
	private Datastore datastore; 
	
	@Test
	public void datastore_test(){
		User user = new User(...);
		Key&amp;lt;User&amp;gt; keyUser = datastore.save(user);
		Assertions.assertThat(keyUser).isNotNull();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repositories&#34;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;The Morphia addon also provides repositories which can be use with the &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/business/&#34;&gt;Business Framework&lt;/a&gt;.
Default repositories can be used by injecting the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;business.&amp;amp;#8203;domain.&amp;amp;#8203;Repository&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/business/domain/Repository.html&#39;&gt;Repository&lt;/a&gt;&lt;/code&gt; interface with
both the &lt;code&gt;@Inject&lt;/code&gt; and &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;mongodb.&amp;amp;#8203;morphia.&amp;amp;#8203;Morphia&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/mongodb/morphia/Morphia.html&#39;&gt;@Morphia&lt;/a&gt;&lt;/code&gt; annotations as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MongodbRepositoryIT extends AbstractSeedIT {

	@Inject
	@Morphia
	private Repository&amp;lt;User, Long&amp;gt; userRepository;
	
	@Inject
	Factory&amp;lt;User&amp;gt; myUserFactory; 
	
	@Test
	public void mongodb_repository_test() {
		userRepository.delete(myUserFactory.create(...));
		User loadedUser = userRepository.load(user1.getEntityId());
		Assertions.assertThat(user).isEqualTo(null);
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Custom repositories can be added simply by extending the class &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;mongodb.&amp;amp;#8203;morphia.&amp;amp;#8203;BaseMongodbRepository&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/mongodb/morphia/BaseMongodbRepository.html&#39;&gt;BaseMongodbRepository&lt;/a&gt;&lt;/code&gt; as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface UserRepository extends Repository&amp;lt;Activation,String&amp;gt; {}
public class UserMongodbRepository extends BaseMongodbRepository&amp;lt;User, Long&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The repository can be injected as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
private UserRepository userRepository;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;To use a &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;mongodb.&amp;amp;#8203;morphia.&amp;amp;#8203;Datastore&#39;&gt;Datastore&lt;/span&gt;&lt;/code&gt; inside the repository simply call the method &lt;code&gt;this.getDatastore()&lt;/code&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/neo4j/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/neo4j/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/redis/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/redis/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/solr/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/solr/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/jdbc/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/jdbc/</guid>
      <description>

&lt;p&gt;Seed JDBC persistence add-on enables your application to interface with any relational database through the JDBC API.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-jdbc-jdbc-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-jdbc-jdbc-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-addons-jdbc-jdbc-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.addons.jdbc&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jdbc&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-addons-jdbc-jdbc-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-addons-jdbc-jdbc-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-addons-jdbc-jdbc-show&#34; onclick=&#34;$(&#39;#org-seedstack-addons-jdbc-jdbc-version, #org-seedstack-addons-jdbc-jdbc-warn&#39;).show(); $(&#39;#org-seedstack-addons-jdbc-jdbc-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-addons-jdbc-jdbc-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.addons.jdbc:jdbc:2.1.3&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;You can configure the add-on in one or more of your *.props files. Declare you list of data source names you will be
configuring later:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.seedstack.jdbc.datasources = datasource1, datasource2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure each data source separately. Notice the use of the keyword &lt;em&gt;property&lt;/em&gt; to specify any property that will be
used by the datasource as specific configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.seedstack.jdbc.datasource.datasource1]
provider = HikariDataSourceProvider
driver = org.hsqldb.jdbcDriver
url = jdbc:hsqldb:mem:testdb1
user = sa
password =
property.specific.jdbc.prop = value
property.prop.for.datasource = value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if you want to lookup the data source through JNDI you can use this configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.seedstack.jdbc.datasource.datasource1]
jndi-name = java:comp/env/jdbc/my-datasource
context = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;context&lt;/code&gt; property is optional and can be used to specify a particular context name configured in
&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/more/#jndi&#34;&gt;core support&lt;/a&gt; to make the lookup. Otherwise the default context (named &lt;code&gt;default&lt;/code&gt;) will be used.&lt;/p&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;The following examples show how to get a JDBC connection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyRepository {

    @Inject
    private Connection connection;

    @Transactional
    @Jdbc(&amp;quot;datasource1&amp;quot;)
    public void updateStuff(int id, String bar){
        try{
            String sql = &amp;quot;INSERT INTO FOO VALUES(?, ?)&amp;quot;;
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, id);
            statement.setString(2, bar);
            statement.executeUpdate();
        } catch(SqlException e){
            throw new SomeRuntimeException(e, &amp;quot;message&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;As seen in the example above, any interaction with this connection have to be done inside a &lt;strong&gt;transaction&lt;/strong&gt;. Refer to the &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/transactions/&#34;&gt;transaction support documentation&lt;/a&gt; for more detail.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;data-source-providers&#34;&gt;Data source providers&lt;/h1&gt;

&lt;h2 id=&#34;built-in-providers&#34;&gt;Built-in providers&lt;/h2&gt;

&lt;p&gt;When using a non JNDI data source, we recommend the use of pooled datasource through a DataSourceProvider defined in the
configuration. Four data source providers can be specified in the &lt;code&gt;provider&lt;/code&gt; property:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://brettwooldridge.github.io/HikariCP/&#34;&gt;HikariCP&lt;/a&gt; with &lt;code&gt;HikariDataSourceProvider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-dbcp/&#34;&gt;Commons DBCP&lt;/a&gt; with &lt;code&gt;DbcpDataSourceProvider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mchange.com/projects/c3p0/&#34;&gt;C3P0&lt;/a&gt; with &lt;code&gt;C3p0DataSourceProvider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A test-only plain data source provider with &lt;code&gt;PlainDataSourceProvider&lt;/code&gt;. &lt;strong&gt;Do not use in production&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;custom-providers&#34;&gt;Custom providers&lt;/h2&gt;

&lt;p&gt;In the case you want to use another data source provider, you can create your own &lt;code&gt;DataSourceProvider&lt;/code&gt; by implementing the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;jdbc.&amp;amp;#8203;spi.&amp;amp;#8203;DataSourceProvider&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/jdbc/spi/DataSourceProvider.html&#39;&gt;DataSourceProvider&lt;/a&gt;&lt;/code&gt; interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SomeDataSourceProvider implements DataSourceProvider {

    @Override
    public DataSource provideDataSource(String driverClass, String
            url, String user, String password, Properties jdbcProperties) {
        SomeDataSource sds = new SomeDataSource();
        sds.setDriverClass(driverClass);
        sds.setJdbcUrl(url);
        sds.setUser(url);
        sds.setPassword(user);
        sds.setProperties(jdbcProperties);
        return sds;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be able to declare it in your configuration as &lt;code&gt;SomeDataSourceProvider&lt;/code&gt; (the simple name of your class). Note
that if you want to use one of the three datasource providers described above, you will have to add the corresponding
dependency to your project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/jpa/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/jpa/</guid>
      <description>

&lt;p&gt;Seed JPA persistence add-on enables your application to interface with any relational database through a JPA-compliant
ORM. Note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This version doesn&amp;rsquo;t enforce a specific JPA version. It is currently tested with JPA 1.0, JPA 2.0 and JPA 2.1.&lt;/li&gt;
&lt;li&gt;This add-on is compatible with any ORM implementation.&lt;/li&gt;
&lt;/ul&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-jpa-jpa-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-jpa-jpa-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-addons-jpa-jpa-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.addons.jpa&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jpa&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-addons-jpa-jpa-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-addons-jpa-jpa-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-addons-jpa-jpa-show&#34; onclick=&#34;$(&#39;#org-seedstack-addons-jpa-jpa-version, #org-seedstack-addons-jpa-jpa-warn&#39;).show(); $(&#39;#org-seedstack-addons-jpa-jpa-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-addons-jpa-jpa-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.addons.jpa:jpa:2.1.3&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If you want to use the popular &lt;a href=&#34;http://hibernate.org/orm/&#34;&gt;Hibernate ORM&lt;/a&gt;, use the following Maven dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-entitymanager&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only add the JPA specification to declare entity classes in any module that does not have the hibernate dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate.javax.persistence&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-jpa-2.1-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0.Final&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;The JPA add-on doesn&amp;rsquo;t need any &lt;code&gt;persistence.xml&lt;/code&gt; file in its default mode of operation as it will automatically generate
persistence unit information. First, declare the list of your persistence units in the configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa]
units = my-jpa-unit, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The you must reference a JDBC datasource for each JPA unit. To do so, please refer to the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons/jdbc/&#34;&gt;JDBC add-on configuration&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
datasource = my-datasource
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Seed has no way of knowing to which persistence unit belong each entity class, so you must indicate this with
the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.myorganization.myapp.domain.*]
jpa-unit = my-jpa-unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will put all the entities scanned in the &lt;code&gt;org.myorganization.myapp.domain&lt;/code&gt; package and its subpackages into the
&lt;code&gt;my-jpa-unit&lt;/code&gt; persistence unit.&lt;/p&gt;

&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;p&gt;You can specify the type of transactions by using the following configuration
(&lt;a href=&#34;http://docs.oracle.com/javaee/6/api/javax/persistence/spi/PersistenceUnitInfo.html#getTransactionType%28%29&#34;&gt;more info&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
transaction-type = JTA | RESOURCE_LOCAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer to use XML JPA mapping files instead of annotations you can specify them with the following configuration
(&lt;a href=&#34;http://docs.oracle.com/javaee/6/api/javax/persistence/spi/PersistenceUnitInfo.html#getMappingFileNames%28%29&#34;&gt;more info&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
mapping-files = path/to/mapping/file1.xml, path/to/mapping/file2.xml, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify the validation mode with the following configuration
(&lt;a href=&#34;http://docs.oracle.com/javaee/6/api/javax/persistence/spi/PersistenceUnitInfo.html#getValidationMode%28%29&#34;&gt;more info&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
validation-mode = path/to/mapping/file1.xml, path/to/mapping/file2.xml, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify the shared cache mode with the following configuration
(&lt;a href=&#34;http://docs.oracle.com/javaee/6/api/javax/persistence/spi/PersistenceUnitInfo.html#getSharedCacheMode%28%29&#34;&gt;more info&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
shared-cache-mode = ALL | NONE | ENABLE_SELECTIVE | DISABLE_SELECTIVE | UNSPECIFIED
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;properties&#34;&gt;Properties&lt;/h2&gt;

&lt;p&gt;If you need to pass any property to the persistence unit, you can do so with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
property.name.of.the.property1 = value-of-the-property1
property.name.of.the.property2 = value-of-the-property2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;using-the-entity-manager&#34;&gt;Using the Entity Manager&lt;/h1&gt;

&lt;p&gt;To use the Entity Manager in your code, simply inject it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyRepository {

    @Inject
    private EntityManager entityManager;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All JPA interactions have to be realized inside a transaction. Refer to the &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/transactions/&#34;&gt;transaction support
documentation&lt;/a&gt; for more detail. Below is an example using the annotation-based transaction
demarcation (notice the &lt;code&gt;persistence.xml&lt;/code&gt; unit name in &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;jpa.&amp;amp;#8203;JpaUnit&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/jpa/JpaUnit.html&#39;&gt;@JpaUnit&lt;/a&gt;&lt;/code&gt; annotation)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyService {

    @Inject
    private MyRepository myRepository;

    @Transactional
    @JpaUnit(&amp;quot;my-jpa-unit&amp;quot;)
    public void doSomethingWithMyJpaUnit() {

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;jpa.&amp;amp;#8203;JpaUnit&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/jpa/JpaUnit.html&#39;&gt;@JpaUnit&lt;/a&gt;&lt;/code&gt; annotation is NOT optional as the JPA add-on includes the JDBC add-on as a dependency, so the
conditions that you must have only one type of transactional resources in your application cannot be fulfilled. You can omit the
name of the unit if you only have one unit in your application, although we recommend you to always specify it explicitly.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://seedstack.org/archives/16.7/addons/elasticsearch/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/elasticsearch/</guid>
      <description>

&lt;p&gt;The ElasticSearch add-on allows you to configure, inject and use &lt;a href=&#34;https://www.elastic.co&#34;&gt;ElasticSearch&lt;/a&gt; clients.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-elasticsearch-elasticsearch-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-addons-elasticsearch-elasticsearch-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-addons-elasticsearch-elasticsearch-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.addons.elasticsearch&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;elasticsearch&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-addons-elasticsearch-elasticsearch-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-addons-elasticsearch-elasticsearch-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-addons-elasticsearch-elasticsearch-show&#34; onclick=&#34;$(&#39;#org-seedstack-addons-elasticsearch-elasticsearch-version, #org-seedstack-addons-elasticsearch-elasticsearch-warn&#39;).show(); $(&#39;#org-seedstack-addons-elasticsearch-elasticsearch-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-addons-elasticsearch-elasticsearch-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.addons.elasticsearch:elasticsearch:2.1.1&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Main features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embedded indexes,&lt;/li&gt;
&lt;li&gt;Remote indexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;More information about the ElasticSearch Java API &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/index.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;To access an ElasticSearch index, you need to declare a client in configuration. Multiple clients can be configured. They
must be listed in the following property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.elasticsearch.clients = client1, client2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-instance&#34;&gt;Remote instance&lt;/h2&gt;

&lt;p&gt;To access a remote ElasticSearch index, you need to specify the host(s) of one or more node(s) of the ElasticSearch
cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.elasticsearch.client.client1]
hosts = host1:port1, host2:port2, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can omit the port in which case will be set to the ElasticSearch default (9300).&lt;/p&gt;

&lt;h2 id=&#34;embedded-instance&#34;&gt;Embedded instance&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t specify the &lt;code&gt;hosts&lt;/code&gt; property, a local ElasticSearch node will be created and stored in the &lt;code&gt;persistence-elasticsearch/{client-name}&lt;/code&gt;
subdirectory of the Seed local storage location, where &lt;code&gt;{client-name}&lt;/code&gt; is the name of the ElasticSearch client.&lt;/p&gt;

&lt;h2 id=&#34;other-options&#34;&gt;Other options&lt;/h2&gt;

&lt;p&gt;You can specify any configuration property of the ElasticSearch client with the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.elasticsearch.client.client1]
property.name.of.elasticsearch.property = value
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;To use a configured ElasticSearch client, simply inject it where needed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
@Named(&amp;quot;client1&amp;quot;)
Client client1;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;

&lt;p&gt;Configuration for an embedded ElasticSearch instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.elasticsearch.clients = test

[org.seedstack.elasticsearch.client.test]
property.cluster.name = test-cluster-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To inject this configured client, use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;@Inject
@Named(&amp;quot;test&amp;quot;)
Client testClient;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Alternate configuration</title>
      <link>http://seedstack.org/archives/16.7/addons/jpa/alternative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/addons/jpa/alternative/</guid>
      <description>

&lt;p&gt;As an alternative to the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons/jpa/#configuration&#34;&gt;automatic configuration&lt;/a&gt; you can let JPA manage its own datasource instead of referencing
one defined in the JDBC add-on. In this case you must provide a &lt;code&gt;persistence.xml&lt;/code&gt; file. This file has to be placed under
the &lt;code&gt;META-INF&lt;/code&gt; directory of your classpath (for instance in &lt;code&gt;src/main/resources/META-INF&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;persistence xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence&amp;quot;
             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
             xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd&amp;quot;
             version=&amp;quot;2.1&amp;quot;&amp;gt;

    &amp;lt;persistence-unit name=&amp;quot;my-jpa-unit&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;
        &amp;lt;class&amp;gt;org.seedstack.jpa.sample.Item1&amp;lt;/class&amp;gt;
    &amp;lt;/persistence-unit&amp;gt;

&amp;lt;/persistence&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The JPA version (2.1 in this example)&lt;/li&gt;
&lt;li&gt;A unit named &lt;code&gt;my-jpa-unit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A local transaction type (&lt;code&gt;RESOURCE_LOCAL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The list of persistence classes to map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can declare as many units as required in a &lt;code&gt;persistence.xml&lt;/code&gt; file. You can also add configuration properties directly
in this file, although it is recommended to specify them in the configuration. When using a &lt;code&gt;persistence.xml&lt;/code&gt; file, you
must either specify a datasource via properties or via JNDI.&lt;/p&gt;

&lt;h1 id=&#34;option-1-datasource-via-properties&#34;&gt;Option 1: datasource via properties&lt;/h1&gt;

&lt;p&gt;The datasource can be specified through properties, either in the configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.jpa.unit.my-jpa-unit]
property.javax.persistence.jdbc.driver = ...
property.javax.persistence.jdbc.url = ...
property.javax.persistence.jdbc.user = ...
property.javax.persistence.jdbc.password = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or in the directly in the &lt;code&gt;persistence.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;persistence-unit name=&amp;quot;my-jpa-unit&amp;quot; transaction-type=&amp;quot;RESOURCE_LOCAL&amp;quot;&amp;gt;
    ...

    &amp;lt;properties&amp;gt;
        &amp;lt;property name=&amp;quot;...&amp;quot; value=&amp;quot;...&amp;quot;/&amp;gt;
    &amp;lt;/properties&amp;gt;

    ...
&amp;lt;/persistence-unit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specification of properties in the configuration is recommended as it allows greater flexibility (access to
environment variables and system properties, usage of configuration profiles, macros, &amp;hellip;).&lt;/p&gt;

&lt;h1 id=&#34;option-2-datasource-via-jndi&#34;&gt;Option 2: datasource via JNDI&lt;/h1&gt;

&lt;p&gt;In some environments like in a Web server, it may be preferable to use JNDI instead of configuration properties. You can
do so by specifying the JNDI name of the datasource in the &lt;code&gt;persistence.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;non-jta-data-source&amp;gt;java:comp/env/jdbc/my-datasource&amp;lt;/non-jta-data-source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of a JTA data source, use following line instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;jta-data-source&amp;gt;java:comp/env/jdbc/my-datasource&amp;lt;/jta-data-source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of a Web application, add the following JNDI reference in your &lt;code&gt;web.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resource-ref&amp;gt;
    &amp;lt;res-ref-name&amp;gt;jdbc/my-datasource&amp;lt;/res-ref-name&amp;gt;
    &amp;lt;res-type&amp;gt;javax.sql.DataSource&amp;lt;/res-type&amp;gt;
    &amp;lt;res-auth&amp;gt;Container&amp;lt;/res-auth&amp;gt;
&amp;lt;/resource-ref&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may need to add additional files depending on your Web container. Please refer to the the dedicated container
documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Factories</title>
      <link>http://seedstack.org/archives/16.7/docs/business/manual/factories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/business/manual/factories/</guid>
      <description>&lt;p&gt;A factory is a pattern used to &lt;strong&gt;create domain objects&lt;/strong&gt;, checking that provided data is complete and consistent.&lt;/p&gt;

&lt;p&gt;To be created by a factory the domain object must also implements &lt;code&gt;Producible&lt;/code&gt;. This is necessary because all
the domain objects are not producible by a factory. For instance an entity is only be producible by an aggregate
root.&lt;/p&gt;

&lt;p&gt;The types implementing &lt;code&gt;DomainObject&lt;/code&gt; and &lt;code&gt;Producible&lt;/code&gt; are the followings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AggregateRoot,&lt;/li&gt;
&lt;li&gt;DomainPolicy,&lt;/li&gt;
&lt;li&gt;ValueObject,&lt;/li&gt;
&lt;li&gt;DomainEvent,&lt;/li&gt;
&lt;li&gt;DomainService.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;default-factory&#34;&gt;Default factory&lt;/h1&gt;

&lt;p&gt;The default factory has a single method &lt;code&gt;create&lt;/code&gt; with varargs that will match via reflection the constructor corresponding
to the passed arguments. The created domain object should implement the desired constructors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Customer extends BaseAggregate&amp;lt;Long&amp;gt; {
    private Long id;

    Customer() {
        ...
    }

    Customer(String firstName, String lastName) { // This constructor will be called
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default factory can then be injected and used by invoking its &lt;code&gt;create()&lt;/code&gt; method with arguments unambiguously corresponding
to only one constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
Factory&amp;lt;Customer&amp;gt; factory;

Customer customer = factory.create(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One benefit over the plain constructor approach is that default factories will invoke identity generation (see &lt;a href=&#34;#identity-generation&#34;&gt;below&lt;/a&gt;)
and/or validation automatically after object instantiation. The&lt;/p&gt;

&lt;p&gt;As other factories this method will provide validation on the created object. But it won&amp;rsquo;t survive to refactoring, so be careful using the method (ie. unit test it!).&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;This factory can only be used to create domain objects that implement the &lt;code&gt;Producible&lt;/code&gt; and &lt;code&gt;DomainObject&lt;/code&gt; interfaces. Classes
extending Business framework base classes will already implement those interfaces but annotated POJO, such as policies or
services, must implement them explicitly. As an alternative, you implement the &lt;code&gt;GenericDomainPolicy&lt;/code&gt; and &lt;code&gt;GenericDomainService&lt;/code&gt;
interfaces instead.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;custom-factory&#34;&gt;Custom factory&lt;/h1&gt;

&lt;p&gt;A custom factory is composed of an interface, which is located in the package of the aggregate it constructs, and an
implementation which can be located either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the aggregate package too,&lt;/li&gt;
&lt;li&gt;Or in an infrastructure package if it is dependent upon a specific technology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The factory interface has to extend the &lt;code&gt;GenericFactory&lt;/code&gt; interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.mycompany.myapp.domain.model.order;

import org.javatuples.Triplet;
import org.seedstack.business.domain.GenericFactory;

public interface OrderFactory extends GenericFactory&amp;lt;Order&amp;gt; {

    Order createOrder(String customerId, Date checkoutDate, Double price,
            List&amp;lt;Triplet&amp;lt;Integer, Double, Long&amp;gt;&amp;gt; orderItemTriplets);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Order&lt;/code&gt; is the type which is the expected to be returned by all the create methods.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createOrder&lt;/code&gt; method creates an &lt;code&gt;Order&lt;/code&gt; aggregate with the required parameters. Some parameters can be grouped with a tuple like
&lt;code&gt;oderItemTriplets&lt;/code&gt; which represents a list &lt;code&gt;OrderItem&lt;/code&gt; entities belonging to the &lt;code&gt;Order&lt;/code&gt; aggregate (see
&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/business/manual/#tuples&#34;&gt;tuples&lt;/a&gt; for more information on tuple pattern).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The factory implementation must extend the &lt;code&gt;BaseFactory&lt;/code&gt; abstract class and implement its own interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.mycompany.myapp.domain.model.order;

import org.javatuples.Triplet;
import org.seedstack.business.domain.BaseFactory;
import org.mycompany.myapp.domain.customer.CustomerId;

public class OrderFactoryImpl extends BaseFactory&amp;lt;Order&amp;gt; implements OrderFactory {

    @Override
    public Order createOrder(String customerId) {
        Order o = new Order();

        o.setCustomerId(new CustomerId(customerId));
        o.setCheckoutDate(new Date());

        return o;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the factory encapsulates the logic of creating a minimal but valid &lt;code&gt;Order&lt;/code&gt; aggregate. This order can be further
populated by an assembler or by custom logic.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;When the implementation and its interface share the same package, the &lt;strong&gt;implementation should be in package visibility&lt;/strong&gt;.
It prevents any direct use of the implementation.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;identity-generation&#34;&gt;Identity generation&lt;/h1&gt;

&lt;p&gt;Factories provide methods to create entities with a well defined identity. But sometimes, you want to delegate the identity
creation, for instance to an Oracle sequence. For this use case Seed provides an &lt;strong&gt;identity generation strategies&lt;/strong&gt;.
A generation strategy makes sure a unique identity is provided to any new Entity before it is even persisted.&lt;/p&gt;

&lt;h2 id=&#34;declaration&#34;&gt;Declaration&lt;/h2&gt;

&lt;p&gt;Below is an aggregate using the identity strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.mycompany.myapp.domain.model.myaggregate;

public class MyAggregate extends BaseAggregateRoot&amp;lt;UUID&amp;gt; {

    @Identity(handler = UUIDHandler.class)
    private UUID id;

    private String name;
    private MyEntity mySubEntity;
    private Set&amp;lt;MyEntity&amp;gt; mySubEntities;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is an Entity using the identity strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.mycompany.myapp.domain.model.myaggregate;

public class MyEntity extends BaseEntity&amp;lt;Long&amp;gt; {

    @Identity(handler = SequenceHandler.class)
    private Long id;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;@Identity&lt;/code&gt; annotation is applied on attribute holding the object identity. This annotation takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;handler&lt;/code&gt;: strategy implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;: a String that can be used in a custom handler. For instance, it could provide a SEQUENCE name for DB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only specifying the identity strategy is not enough to effectively generate an identity. An implementation of the strategy
must be configured:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.mycompany.myapp.domain.model.myaggregate.MyAggregate]
identity.handler-qualifier = simple-UUID

[org.mycompany.myapp.domain.model.myaggregate.MyEntity]
identity.handler-qualifier = oracle-sequence
identity.sequence-name = SEQ_TEST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case we can see that the &lt;code&gt;simple-UUID&lt;/code&gt; implementation will be used for &lt;code&gt;MyAggregate&lt;/code&gt;. Similarly, the &lt;code&gt;oracle-sequence&lt;/code&gt;
implementation will be used for &lt;code&gt;MyEntity&lt;/code&gt; but is further configured with a sequence name.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The chosen identity strategy is applied:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatically, on methods annotated with the &lt;code&gt;@Create&lt;/code&gt; annotation. They are intercepted to apply the identity strategy
on their return value.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public class MyAggregateFactoryDefault extends BaseFactory&amp;lt;MyAggregate&amp;gt;
        implements MyAggregateFactory {

    @Create
    @Override
    public MyAggregate createMyAggregate(String name) {
        MyAggregate myAggregate = new MyAggregate();
        myAggregate.setName(name);

        MyEntity myEntity = createMyEntity();
        myAggregate.setMyEntity(myEntity);

        return myAggregate;
    }

    @Create
    MyEntity createMyEntity() {
        return new MyEntity();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Manually, by injecting the &lt;code&gt;IdentityService&lt;/code&gt; service and invoking its &lt;code&gt;identify()&lt;/code&gt; method with the entity to generate
an identity for as argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public class MyAggregateFactoryDefault extends BaseFactory&amp;lt;MyAggregate&amp;gt;
        implements MyAggregateFactory {

    @Inject
    IdentityService identityService;

    @Override
    public MyAggregate createMyAggregate(String name) {
        MyAggregate myAggregate = new MyAggregate();
        identityService.identify(myAggregate);
        myAggregate.setName(name);

        MyEntity myEntity = new MyEntity();
        identityService.identify(myEntity);
        myAggregate.setMyEntity(myEntity);

        return myAggregate;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that identity generation doesn&amp;rsquo;t walk the object graph to generate identities for eventual sub-entities. You must
trigger identity generation (automatically or manually) separately on each entity.&lt;/p&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If all methods of a factory delegate identity generation to Seed, a &lt;code&gt;@Create&lt;/code&gt; annotation can be applied directly at the
class or interface level.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;custom-identity-handler&#34;&gt;Custom identity handler&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;img/manage-entity-spi.svg&#34; alt=&#34;identity-seed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Two different options are available to define custom identity handlers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/manage-entity-usage.png&#34; alt=&#34;identity-seed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Below is an example of a basic Timestamp id generation strategy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.mycompany.myapp.infrastructure.domain;

import org.seedstack.business.domain.BaseEntity;
import org.seedstack.business.domain.identity.IdentityHandler;

@Named(&amp;quot;timestamp-id&amp;quot;)
public class TimestampIdentityHandler implements IdentityHandler&amp;lt;BaseEntity&amp;lt;Long&amp;gt;, Long&amp;gt; {

    @Override
    public Long handle(BaseEntity&amp;lt;Long&amp;gt; entity, Map&amp;lt;String, String&amp;gt; entityConfig) {
        return new Date().getTime();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;provided-identity-strategies&#34;&gt;Provided identity strategies&lt;/h2&gt;

&lt;h3 id=&#34;sequencehandler&#34;&gt;SequenceHandler&lt;/h3&gt;

&lt;p&gt;Handles sequence generated ID. Two implementations are provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OracleSequenceHandler&lt;/code&gt;: Get next oracle sequence value for new entity id. The following properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[org.mycompany.myapp...YourEntity]
identity.handler-qualifier = oracle-sequence
identity.sequence-name = your_sequence_name
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InMemorySequenceHandler&lt;/code&gt;: To be used &lt;strong&gt;ONLY&lt;/strong&gt; for testing (preserves behaviour without a database). The following
properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[org.mycompany.myapp...YourEntity]
identity.handler-qualifier = inmemory-sequence
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uuidhandler&#34;&gt;UUIDHandler&lt;/h3&gt;

&lt;p&gt;Use for handling UUID generated ID. One implementation is provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SimpleUUIDHandler&lt;/code&gt;: Get new random UUID from java.util.UUID.randomUUID(). Need one property using entity props
configuration:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[org.mycompany.myapp...YourEntity]
identity.handler-qualifier = simple-UUID
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Repositories</title>
      <link>http://seedstack.org/archives/16.7/docs/business/manual/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/business/manual/repositories/</guid>
      <description>&lt;p&gt;A repository is a pattern used to store and retrieve Aggregates from persistence with a &lt;strong&gt;simple and global interface&lt;/strong&gt;,
providing the illusion of an in-memory collection. A repository manipulates a whole aggregate through its aggregate
root and ensures that it is persisted and retrieved in a coherent manner.&lt;/p&gt;

&lt;h1 id=&#34;default-repository&#34;&gt;Default repository&lt;/h1&gt;

&lt;p&gt;The Business Framework provides a default repository that can perform CRUD actions on an aggregate.
It can be injected with the &lt;code&gt;Repository&lt;/code&gt; interface and a qualifier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject @Jpa
private Repository&amp;lt;Customer, String&amp;gt; customerRepo;

...
Customer customer = customerRepo.load(customerId);
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;By default, you have to explicitly specify the qualifier.
But if you have only one persistence and one default repository, you can configure the one to use.
The default repository can be configured for all the application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.example.*]
default-repository=org.seedstack.jpa.Jpa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also override it for a specific aggregate root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.example.domain.customer.Customer]
default-repository=another-qualifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;default.repository.qualifier&lt;/code&gt; property expects a qualifier annotation class or a string when the qualifier use &lt;code&gt;@Named(&amp;quot;another-qualifer&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;custom-repository&#34;&gt;Custom repository&lt;/h1&gt;

&lt;p&gt;The default CRUD repository is interesting to start quickly and might be enough for some use cases. But it is possible to
add your own repositories, in order to extend the CRUD behavior with your domain
requirements.&lt;/p&gt;

&lt;p&gt;First create a repository interface extending &lt;code&gt;GenericRepository&lt;/code&gt;. This interface is usually located in the aggregate package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import org.seedstack.business.domain.Repository;

public interface OrderRepository extends GenericRepository&amp;lt;Order, Long&amp;gt; {

     Order findOrderByCategory(String categoryId)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;It is possible not to use the &lt;code&gt;GenericRepository&lt;/code&gt; interface and instead annotate the class with the &lt;code&gt;@DomainRepository&lt;/code&gt; annotation.
But you won&amp;rsquo;t be able to use the framework&amp;rsquo;s helpers like the assembler DSL &lt;code&gt;fromRepository()&lt;/code&gt; method.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then add an implementation in the infrastructure layer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OrderJpaRepository extends BaseJpaRepository&amp;lt;Order, Long&amp;gt; implements OrderRepository {

    @Override
    public Order findOrderByCategory(String categoryId){ ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;An explicit repository can be injected like a default one (with the &lt;code&gt;Repository&lt;/code&gt; interface):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
private Repository&amp;lt;Order, Long&amp;gt; repository;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with its own interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
private OrderRepository repository;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>