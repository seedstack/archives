<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://seedstack.org/archives/16.7/zones/seed/index.xml</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://seedstack.org/archives/16.7/zones/seed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Command-line</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/cli/</guid>
      <description>&lt;p&gt;Writing advanced command-line applications is simple with the Java framework command-line interface (CLI) module. Seed
provides support for multiple commands, each with their own options and argument combinations. To enable CLI support
to your project, add the &lt;code&gt;seed-cli&lt;/code&gt; module to your classpath.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-cli-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-cli-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-cli-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-cli&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-cli-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-cli-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-cli-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-cli-version, #org-seedstack-seed-seed-cli-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-cli-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-cli-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-cli:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h1 id=&#34;defining-commands&#34;&gt;Defining commands&lt;/h1&gt;

&lt;p&gt;To define a CLI command, simply declare a class implementing the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CommandLineHandler&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CommandLineHandler.html&#39;&gt;CommandLineHandler&lt;/a&gt;&lt;/code&gt;
interface and annotated with &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CliCommand&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CliCommand.html&#39;&gt;@CliCommand&lt;/a&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@CliCommand(&amp;quot;my-command&amp;quot;)
public class MyCommandLineHandler implements CommandLineHandler {

    @Override
    public Integer call() throws Exception {
        return 0;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will register the command named &lt;code&gt;my-command&lt;/code&gt; without any option or argument. When this command is invoked
from the command-line, the &lt;code&gt;call&lt;/code&gt; method is invoked. You must return an integer code from this method which will be
returned to the operating system.&lt;/p&gt;

&lt;h1 id=&#34;running-commands&#34;&gt;Running commands&lt;/h1&gt;

&lt;p&gt;When the &lt;code&gt;seed-cli&lt;/code&gt; module is present on the classpath, you can launch any command by invoking the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;core.&amp;amp;#8203;SeedMain&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/core/SeedMain.html&#39;&gt;SeedMain&lt;/a&gt;&lt;/code&gt;
main class from the command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java [jvm-args] -cp ... org.seedstack.core.SeedMain my-command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will execute the &lt;code&gt;call()&lt;/code&gt; method of the &lt;code&gt;MyCommandLineHandler&lt;/code&gt; class defined above.&lt;/p&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;The &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;core.&amp;amp;#8203;SeedMain&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/core/SeedMain.html&#39;&gt;SeedMain&lt;/a&gt;&lt;/code&gt; class will search for a &lt;em&gt;unique&lt;/em&gt; implementation of the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;spi.&amp;amp;#8203;SeedLauncher&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/spi/SeedLauncher.html&#39;&gt;SeedLauncher&lt;/a&gt;&lt;/code&gt;
interface in the classpath and execute it. The &lt;code&gt;seed-cli&lt;/code&gt; module provides an implementation for command-line execution
but the &lt;code&gt;seed-web-undertow&lt;/code&gt; module provides one for embedded Web server execution. If both are in
the classpath at the same time, an exception will occur. &lt;strong&gt;To avoid this situation, be sure use separate modules for
command-line applications and web applications.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;One difficulty of running a Java application from the command line is to properly set its classpath. As such, launching
a Seed application from the command line is often used in combination with Ã¼ber-JAR packaging where a unique JAR contains
all the necessary classes and dependencies to run the application. With this kind of packaging, launching the application
becomes as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java [jvm-args] -jar app.jar [app-args]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/maven-plugin/&#34;&gt;SeedStack Maven plugin&lt;/a&gt; for more information about how to easily package such a JAR.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;arguments-and-options&#34;&gt;Arguments and options&lt;/h1&gt;

&lt;p&gt;More often than not, commands must accept various options and arguments to alter their behaviors. This is well supported
by the Java framework through annotations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CliOption&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CliOption.html&#39;&gt;@CliOption&lt;/a&gt;&lt;/code&gt; annotation can be applied to &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CommandLineHandler&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CommandLineHandler.html&#39;&gt;CommandLineHandler&lt;/a&gt;&lt;/code&gt;s
fields to inject an option.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CliArgs&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CliArgs.html&#39;&gt;@CliArgs&lt;/a&gt;&lt;/code&gt; annotation can be applied to &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CommandLineHandler&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CommandLineHandler.html&#39;&gt;CommandLineHandler&lt;/a&gt;&lt;/code&gt;s
fields to inject command arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@CliCommand(&amp;quot;test&amp;quot;)
public class SampleCommandLineHandler implements CommandLineHandler {
    @CliOption(name = &amp;quot;o1&amp;quot;, longName = &amp;quot;option1&amp;quot;)
    private Boolean hasOption1;

    @CliOption(name = &amp;quot;o2&amp;quot;, longName = &amp;quot;option2&amp;quot; valueCount = 1, mandatory = true)
    private String option2;

    @CliOption(name = &amp;quot;o3&amp;quot;, valueCount = 2, mandatoryValue = true, defaultValues = {&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;})
    private String[] option3;

    @CliOption(name = &amp;quot;o4&amp;quot;, valueCount = -1, valueSeparator = &#39;=&#39;)
    private Map&amp;lt;String, String&amp;gt; option4;

    @CliArgs(mandatoryCount = 2)
    private String[] args;

    @Override
    public Integer call() throws Exception {
        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The annotations above define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An option named &lt;code&gt;o1&lt;/code&gt; or &lt;code&gt;option1&lt;/code&gt; which acts as a flag, present or not. Its presence is injected in the &lt;code&gt;hasOption1&lt;/code&gt;
boolean field. &lt;em&gt;This can be specified with &lt;code&gt;-o1&lt;/code&gt; or &lt;code&gt;--option1&lt;/code&gt; on the command-line.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;An option named &lt;code&gt;o2&lt;/code&gt; or &lt;code&gt;option2&lt;/code&gt; which takes a unique value. Its value is injected in the &lt;code&gt;option2&lt;/code&gt; string field.
This option is mandatory. &lt;em&gt;This can be specified with the &lt;code&gt;-o2 value&lt;/code&gt; or &lt;code&gt;--option2 value&lt;/code&gt; on the command-line.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;An option named &lt;code&gt;o3&lt;/code&gt; which takes 2 comma-separated values (the default separator). The values for this option are
mandatory and default to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. They are injected in the &lt;code&gt;option3&lt;/code&gt; string array field. &lt;em&gt;This can be specified with
&lt;code&gt;-o3 5,6&lt;/code&gt; on the command-line&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;An option named &lt;code&gt;o4&lt;/code&gt; which takes and unlimited number of values separated by &lt;code&gt;=&lt;/code&gt;. The odd/even value pairs are injected
as key/value pairs in the map. &lt;em&gt;This can be specified as &lt;code&gt;-o4 key1=value1 -o4 key2=value2&lt;/code&gt; on the command-line&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Any number of arguments with at-least two which are mandatory. &lt;em&gt;This can be specified as &lt;code&gt;arg1 arg2&lt;/code&gt; on the command-line&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;You can find more information about the various parameters and combinations in the &lt;a href=&#34;http://seedstack.org/javadoc/org/seedstack/seed/cli/package-summary.html&#34;&gt;Javadoc&lt;/a&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cryptography</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/crypto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/crypto/</guid>
      <description>&lt;p&gt;Seed provides helpers for Java cryptography: private key encryption, secure hashing, KeyStore configuration and SSL
configuration. To use these helpers add the &lt;code&gt;seed-crypto&lt;/code&gt; module to your classpath.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-crypto-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-crypto-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-crypto-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-crypto&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-crypto-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-crypto-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-crypto-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-crypto-version, #org-seedstack-seed-seed-crypto-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-crypto-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-crypto-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-crypto:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h1 id=&#34;encryption&#34;&gt;Encryption&lt;/h1&gt;

&lt;p&gt;Seed provides an &lt;code&gt;EncryptionService&lt;/code&gt; which allows you to securely store or exchange data. It is based on a Public Key Infrastructure (PKI),
i.e. it encrypt data using a public key and then decrypt it with a private key. To use it you will have to declare the key pair to use.
In java keys are stored using a &lt;code&gt;KeyStore&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;keystores&#34;&gt;KeyStores&lt;/h2&gt;

&lt;p&gt;Key stores are created using the &lt;code&gt;keytool&lt;/code&gt; command-line tool (see &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/keytool.html&#34;&gt;keytool documentation&lt;/a&gt;).
Here is an example creating a keystore with a key pair:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;keytool -genkeypair -dname &amp;quot;cn=Mark Jones, ou=Java, o=Oracle, c=US&amp;quot;
    -alias database -keypass &amp;lt;new password for private key&amp;gt;
    -keystore ./src/main/resources/app.keystore
    -storepass &amp;lt;new password for keystore&amp;gt; -validity 180
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, it is possible to declare the key store in your configuration as follows. Notice that multiple key stores can be registered.
The key store configuration is prefixed by &lt;code&gt;org.seedstack.seed.crypto.keystore.&amp;lt;keystore name&amp;gt;&lt;/code&gt;. The prefix ends with a
logical key store name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.crypto.keystores=keystoreName, keystoreName2

[org.seedstack.seed.crypto.keystore.keystoreName]
path=src/main/resources/app.keystore
password=&amp;lt;new password for keystore&amp;gt;

# Optional configuration
type=&amp;lt;keystore type&amp;gt;
provider=&amp;lt;keystore provider&amp;gt;

[org.seedstack.seed.crypto.keystore.keystoreName2]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Two keytstore names are registered by default: &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;. The usage of the master keystore is described later
in this &lt;a href=&#34;#configuration-files-protection&#34;&gt;documentation&lt;/a&gt;. The default is only a shortcut when you don&amp;rsquo;t need to have multiple
keystores. So you don&amp;rsquo;t have to specify:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.crypto.keystores=default, master
&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;key-pairs&#34;&gt;Key pairs&lt;/h2&gt;

&lt;p&gt;Java key stores protect keys using passwords and associate public/private key pairs to aliases. For instance, if you want
to register the previously key pair, do it as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.crypto.keystore.keystoreName.alias]
database.password=21B06221FC9EC83BAAD
ssl.password=70E65711ACFEF03F59A
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;It is recommended for security to store certificates in a key store. But if you can&amp;rsquo;t, it is still possible to use an external certificate as follows.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.crypto.cert]
client1.resource=client.cer
client2.file=src/main/resources/seed.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example &lt;code&gt;client1&lt;/code&gt; and &lt;code&gt;client2&lt;/code&gt; correspond to keystore aliases. The first alias is loaded from a resource and
the second from a file. A current limitation with external certificates is that the aliases have to be present in one of the configured keystores.&lt;/p&gt;

&lt;h2 id=&#34;encryptionservice&#34;&gt;EncryptionService&lt;/h2&gt;

&lt;p&gt;When a key store is configured, it is then possible to inject an &lt;code&gt;EncryptionService&lt;/code&gt; for a specific alias.
The alias password has to be configured for accessing the private key. Otherwise the &lt;code&gt;EncryptionService&lt;/code&gt;
will still be bound, but it won&amp;rsquo;t be able to decrypt data. Only the encryption will be possible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
@Named(&amp;quot;database&amp;quot;) // named with the key pair alias
private EncryptionService encryptionService;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And use it to crypt or decrypt data as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final String stringToCrypt = &amp;quot;secret in plain text&amp;quot;;

byte[] encryptedString = encryptionService.encrypt(chaine.getBytes());
byte[] decryptedString = encryptionService.decrypt(encrypt);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;secure-hashing&#34;&gt;Secure hashing&lt;/h1&gt;

&lt;p&gt;Seed crypto also comes with an &lt;code&gt;HashService&lt;/code&gt; which provides the current best default hashing algorithms.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Inject
private HashingService hashingService;
...
Hash hash = hashingService.createHash(&amp;quot;string to hash&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also provides a &lt;strong&gt;secure password validation&lt;/strong&gt;. It takes a password, hashes it and checks
it against the previously hashed password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Hash hash = hashingService.validatePassword(passwordToCheck, verifiedHash);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration-files-protection&#34;&gt;Configuration files protection&lt;/h1&gt;

&lt;p&gt;Sometimes, you need to have &lt;strong&gt;sensitive data in your configuration files&lt;/strong&gt;. Using Seed cryto, it is possible to
encrypt values in your props files. This values are decrypted at runtime. For instance, you can encrypt a password
and specify it in the props file with the &lt;code&gt;${password:XXX}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.crypto.keystore.keystoreName.alias]
client.password=${password:70E65711ACFEF03F59AFCED...F96563A19B18954B49DD59}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The password decrypting is done using an &lt;code&gt;EncryptionService&lt;/code&gt;. This service expect a key store named &lt;code&gt;master&lt;/code&gt; with a
key alias named &lt;code&gt;seed&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.crypto.keystore.master]
path=src/main/resources/masterkeystore.jck
password=${env:KS_PASSWD}
alias.seed.password=${env:KEY_PASSWD}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Generate goal</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/generate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/generate/</guid>
      <description>&lt;p&gt;To create a SeedStack project from scratch you can use &lt;code&gt;generate&lt;/code&gt; goal from the SeedStack Maven Plugin.
This goal is invoked from the command line.&lt;/p&gt;

&lt;h1 id=&#34;parameters&#34;&gt;Parameters&lt;/h1&gt;

&lt;p&gt;Parameters should be given as system properties (&lt;code&gt;-DparameterName=parameterValue&lt;/code&gt;):&lt;/p&gt;

&lt;table class=&#34;table table-striped table-bordered table-condensed&#34;&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;Type&lt;/th&gt;
        &lt;th&gt;Mandatory&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;groupId&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;The group identifier of your generated project. &lt;strong&gt;Required.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;artifactId&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;Yes&lt;/td&gt;
        &lt;td&gt;The artifact identifier of your generated project. &lt;strong&gt;Required.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;version&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The version of your generated project. Defaults to &lt;code&gt;1.0.0-SNAPSHOT&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;type&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;Specifies the archetype type to use for project generation. Needed if &lt;code&gt;archetypeArtifactId&lt;/code&gt; is
        not specified explicitly. No default value. &lt;strong&gt;Available types are: web, rest, domain and batch.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;allowSnapshots&lt;/td&gt;
        &lt;td&gt;Boolean&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;Allow to use archetype snapshots. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;archetypeGroupId&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;Allow to explicitly specify the archetype group identifier. Defaults to &lt;code&gt;com.inetpsa.fnd.tools&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;archetypeArtifactId&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;Allow to explicitly specify the archetype artifact identifier. Needed if &lt;code&gt;type&lt;/code&gt; is not specified. Defaults to &lt;code&gt;seed-{type}-archetype&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;archetypeVersion&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;Allow to explicitly specify the archetype version. Defaults to latest release version available or to the latest snapshot available
        if &lt;code&gt;allowSnapshots&lt;/code&gt; is also specified.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;Interactive mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn org.seedstack:seedstack-maven-plugin:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Batch mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn org.seedstack:seedstack-maven-plugin:generate -DgroupId=org.myorganization -DartifactId=myproject -Dtype=web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; property can be any of the archetype names provided by the distribution (i.e.: web, rest, domain, &amp;hellip;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java framework</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/</guid>
      <description>&lt;p&gt;SeedStack Java framework, also simply known as &amp;laquo;Seed&amp;raquo;, is a comprehensive solution enabling you to build Java applications
or cloud services easily and efficiently.&lt;/p&gt;

&lt;h1 id=&#34;opinionated&#34;&gt;Opinionated&amp;hellip;&lt;/h1&gt;

&lt;p&gt;Whatever you aim to build, from a small command-line tool to the next successful cloud-based service, Seed provides you
with the right set of concepts and technologies from the start. More importantly, it does so without getting in your way
and yet scales well when applied on full-blown enterprise projects.&lt;/p&gt;

&lt;h1 id=&#34;yet-modular&#34;&gt;&amp;hellip;yet modular&lt;/h1&gt;

&lt;p&gt;Built on an extensible plugin system, Seed is highly modular and allows you to choose the technologies you really
need while leaving out the unnecessary bits. Besides, you can extend the core framework abilities by cherry-picking modules
from the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons&#34;&gt;add-ons library&lt;/a&gt; or by rolling-out your own.&lt;/p&gt;

&lt;p&gt;The framework is composed of several separate modules, each one providing a particular technology. The &lt;code&gt;seed-core&lt;/code&gt; module
implements basic framework functionality like application lifecycle, configuration or dependency injection. Its presence
is required in any running application along its companion module &lt;code&gt;seed-specs&lt;/code&gt;, containing the corresponding API classes.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Modules are automatically detected and activated when present in the classpath. As such, simply adding a module JAR to
your project will enable it and all its features.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;jar-organisation&#34;&gt;JAR organisation&lt;/h2&gt;

&lt;p&gt;When relevant, modules provide their API in a separate sub-module suffixed with &lt;code&gt;-specs&lt;/code&gt; in which case the corresponding
module implementation is suffixed &lt;code&gt;-core&lt;/code&gt;. This allows to implement classes using the API without activation. This is
useful when designing reusable components. Besides, to provide a better separation of concerns, some modules are further
split into optional sub-modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seed-[module]-specs&lt;/code&gt; for the API and/or the SPI,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seed-[module]-core&lt;/code&gt; for the main implementation,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seed-[module]-[option]&lt;/code&gt; for an optional implementation module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;package-organisation&#34;&gt;Package organisation&lt;/h2&gt;

&lt;p&gt;The code of each module lives in several Java packages, all prefixed by org.seedstack.seed.???, where ??? is the name
of the module:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.[module]&lt;/code&gt; which contains classes destined to be used by client code,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.[module].spi&lt;/code&gt; which contains the classes needed to extend the module features,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.[module].internal&lt;/code&gt; which contains the module internal classes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.[module].test&lt;/code&gt; which contains testing tools for the module.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-danger&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that application code should &lt;strong&gt;never&lt;/strong&gt; rely on any class from the internal package. It is implementation-specific
and subject to change between versions without notice.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;class-organisation&#34;&gt;Class organisation&lt;/h2&gt;

&lt;p&gt;Seed follows &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID principles&lt;/a&gt; and each class tend to only
have one responsibility, allowing to easily understand what it does. It also does help to keep you implementation simple
and testable.&lt;/p&gt;

&lt;h1 id=&#34;lifecycle&#34;&gt;Lifecycle&lt;/h1&gt;

&lt;p&gt;At the heart of Seed lies the kernel which is started by different means, depending on the runtime context (web
application, standalone java app, test runner, &amp;hellip;). The responsibility of the kernel is to orchestrate all the plugins
in order to setup a fully working application. In turn, each plugin has its own responsibility such as providing
application configuration, integrating a specific technology or augment the application code with a particular behavior.&lt;/p&gt;

&lt;h2 id=&#34;classpath-scanning&#34;&gt;Classpath scanning&lt;/h2&gt;

&lt;p&gt;At the start of kernel, all plugins have the opportunity to request information about classes and resources. Using this
mechanism, they can detect predefined code patterns such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes annotated or meta-annotated with a specific annotation,&lt;/li&gt;
&lt;li&gt;Classes implementing an interface or extending a base class,&lt;/li&gt;
&lt;li&gt;Classes matching a complex predefined specification,&lt;/li&gt;
&lt;li&gt;Resources matching a specific regex,&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Code pattern detection is heavily used throughout SeedStack, for instance to dynamically define injection bindings, to
automatically register classes or to enable particular features. Combined with the convention-over-configuration principle
and sensible default values, it greatly simplifies SeedStack usage.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;phases&#34;&gt;Phases&lt;/h2&gt;

&lt;p&gt;The kernel orchestrates the application lifecycle through the following phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the bootstrapping phase, the runtime starts the kernel which uses the Java service loader mechanism to detect all
the plugins present in the classpath. These plugins register their classpath information requests to the kernel and express
their requirements on other plugins.&lt;/li&gt;
&lt;li&gt;In the initialization phase, the kernel resolve all the classpath requests in only one full classpath scan and invoke
the initialization logic of all plugins in the correct order.&lt;/li&gt;
&lt;li&gt;In the starting phase, the kernel collects the injection bindings dynamically defined by each plugin from the results of the
initialization phase and builds the application main injector. Then the kernel invokes the starting logic of all plugins
in the correct order. At this point, the application is fully operational.&lt;/li&gt;
&lt;li&gt;In the stopping phase, the runtime stops the kernel which invokes the stopping logic of all plugins in the correct
order. A this point, the application is stopped.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;The kernel is a part of &lt;a href=&#34;https://github.com/nuun-io&#34;&gt;Nuun IO&lt;/a&gt; and is independent of SeedStack. For more information
about it, please check &lt;a href=&#34;https://github.com/nuun-io/kernel/wiki&#34;&gt;its own documentation&lt;/a&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;pull-right margin-top-20&#39;&gt;
    &lt;a href=&#39;manual&#39; class=&#34;btn btn-u&#34;&gt;Next: start reading the manual...&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;clearfix&#34;&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java framework basics</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/</guid>
      <description>&lt;p&gt;SeedStack Java framework (or simply Seed) is a solution for building Java applications, no matter how simple or advanced,
without pain. It does so by providing a simple yet highly modular architecture and by taking charge of various technical
aspects frequently encountered in enterprise applications. It accommodates any kind of Java 1.6+ runtime and offers the
same level of features from command-line standalone JVMs to full-fledged Web application servers.&lt;/p&gt;

&lt;h1 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h1&gt;

&lt;p&gt;A minimal Seed-based project only requires the &lt;code&gt;seed-core&lt;/code&gt; module and its dependencies in the classpath. This module
provides basic Seed functionality to your application like lifecycle management, configuration, dependency injection,
logging or error diagnostics. To include &lt;code&gt;seed-core&lt;/code&gt; in your application you have two main options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a dependency manager like &lt;a href=&#34;http://maven.apache.org&#34;&gt;Maven&lt;/a&gt; or &lt;a href=&#34;http://gradle.io&#34;&gt;Gradle&lt;/a&gt;. &lt;strong&gt;This is the recommended
solution.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;seed.jar&lt;/code&gt; manually to your application. This JAR contains all Seed code and the required dependencies in a single,
convenient yet big, library.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-core-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-core-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-core-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-core&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-core-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-core-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-core-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-core-version, #org-seedstack-seed-seed-core-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-core-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-core-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-core:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If you&amp;rsquo;re using Maven, SeedStack provides comprehensive dependency management in its distribution, whether by inheriting
from its parent or by importing its BOM. We recommend doing so to ensure that versions of Seed dependencies are consistent
across the project. Additionally you won&amp;rsquo;t have to specify the version tag of any Seed dependency. Check the
&lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution/&#34;&gt;distribution documentation page&lt;/a&gt; for more information.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;startup-and-shutdown&#34;&gt;Startup and shutdown&lt;/h1&gt;

&lt;p&gt;Starting a Seed application consists in creating a Kernel instance and invoking its startup logic. Later, the
application can be cleanly stopped by invoking the kernel stopping logic. All these steps are already encapsulated by Seed
for two main runtime environments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command line,&lt;/li&gt;
&lt;li&gt;The external servlet-based Web application server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;command-line&#34;&gt;Command line&lt;/h2&gt;

&lt;h3 id=&#34;launch-from-command-line&#34;&gt;Launch from command line&lt;/h3&gt;

&lt;p&gt;This is the simplest way to launch a Seed application. You do so by executing the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;core.&amp;amp;#8203;SeedMain&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/core/SeedMain.html&#39;&gt;SeedMain&lt;/a&gt;&lt;/code&gt; class with
the JVM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java [jvm-args] -cp ... org.seedstack.core.SeedMain [app-args]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;SeedMain&lt;/code&gt; class will search the classpath for an implementation of the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;core.&amp;amp;#8203;spi.&amp;amp;#8203;SeedLauncher&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/core/spi/SeedLauncher.html&#39;&gt;SeedLauncher&lt;/a&gt;&lt;/code&gt; interface
and execute its &lt;code&gt;launch()&lt;/code&gt; method with the application arguments. Exactly one launcher must be present in the classpath or
an exception will be thrown.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Launchers live in various Seed modules such as the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/project-templates/cli/&#34;&gt;CLI module&lt;/a&gt;, handling command-line-interface (CLI) applications
or the &lt;code&gt;seed-web-undertow&lt;/code&gt; module, providing an &lt;a href=&#34;http://undertow.io/&#34;&gt;Undertow&lt;/a&gt; embedded Web server. Without such module
containing a launcher in classpath an exception will be thrown. If you have more than one launcher in the classpath an
exception will also be thrown.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;One difficulty of running a Java application from the command line is to properly set its classpath. As such, launching
a Seed application from the command line is often used in combination with Ã¼ber-JAR packaging where a unique JAR contains
all the necessary classes and dependencies to run the application. With this kind of packaging, launching the application
becomes as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java [jvm-args] -jar app.jar [app-args]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/maven-plugin/&#34;&gt;SeedStack Maven plugin&lt;/a&gt; for more information about how to easily package such a JAR.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;shutdown-from-command-line&#34;&gt;Shutdown from command line&lt;/h3&gt;

&lt;p&gt;To shutdown a Seed application from the command line, you simply have to gracefully stop the JVM. You can do this on any
operating system this by hitting &lt;code&gt;CTRL+C&lt;/code&gt; if the JVM is a foreground process. You can also do this under UNIX systems if
the JVM is a background process by issuing a &lt;code&gt;SIGINT&lt;/code&gt; signal to the JVM process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill -2 pid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In any case, the shutdown logic of the Seed application will be invoked.&lt;/p&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Warning! If you abruptly terminate or kill the JVM process, the application will NOT gracefully shutdown.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;launch-in-web-application-server&#34;&gt;Launch in Web application server&lt;/h2&gt;

&lt;p&gt;A servlet-based Web application server directly manages the lifecycle of an application. If your server is at least at
the Servlet 3.0 level of Servlet API, the &lt;code&gt;seed-web-core&lt;/code&gt; module already contains the necessary classes to trigger Seed
startup and shutdown in response to server events.&lt;/p&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;If your Servlet API level is lower than 3.0, please check &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/web/&#34;&gt;this page&lt;/a&gt; for the required configuration of your application.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;

&lt;p&gt;Logging is a necessity in almost any application. Seed is built upon the popular &lt;a href=&#34;http://www.slf4j.org&#34;&gt;SLF4J logging facade&lt;/a&gt;
and provides its Java Commons Logging bridge and Java Util Logging bridge out-of-the-box. The choice of the SLF4J
implementation is left to you but we recommend &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;Logback&lt;/a&gt;. Seed provides sensible defaults for
Logback in the &lt;code&gt;org/seedstack/seed/core/logging/logback-defaults.xml&lt;/code&gt; resource which can be imported in any Logback
configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;include resource=&amp;quot;org/seedstack/seed/core/logging/logback-defaults.xml&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;These defaults include two &lt;code&gt;stdout&lt;/code&gt; console appenders called &lt;code&gt;STDOUT&lt;/code&gt; for a monochrome output or &lt;code&gt;STDOUT-COLOR&lt;/code&gt; for a
colorized output. You can use these appenders in any of your configured loggers at your discretion.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can inject a logger in any class by annotating an SLF4J logger field with &lt;code&gt;@Logging&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Logging
private Logger logger;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will automatically inject a logger for the enclosing class. This also works on static fields although if you need
your logger fields to be final, you must use the traditional SLF4J syntax instead.&lt;/p&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Seed provides an unified configuration mechanism that is simple to use, thanks to its strict key/value paradigm, but also
very powerful.&lt;/p&gt;

&lt;p&gt;Classpath scanning is used to discover all application configuration files present in the &lt;code&gt;META-INF/configuration&lt;/code&gt;
locations of the classpath, which are aggregated in a global configuration available from anywhere in the application. Seed
supports two configuration file formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The recommended &lt;strong&gt;Props format&lt;/strong&gt; which is a superset of the classic Java Properties format providing a more concise and
expressive configuration language. Props files must have the &lt;code&gt;props&lt;/code&gt; extension.&lt;/li&gt;
&lt;li&gt;The legacy &lt;strong&gt;Properties format&lt;/strong&gt; which is described &lt;a href=&#34;http://docs.oracle.com/javase/6/docs/api/java/util/Properties.html#load(java.io.Reader.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All files must be located under the &lt;code&gt;META-INF/configuration&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;META-INF/configuration
    |
    |- my-app.props
    |- security.props
    |- legacy.properties
    |- ...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Lots of configuration features, such as profiles, sections, appending, etc. are only supported with the Props format.
Try to avoid the legacy Properties format if possible.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;bootstrap-configuration&#34;&gt;Bootstrap configuration&lt;/h2&gt;

&lt;p&gt;A few configuration values must be configured in a special configuration file that &lt;strong&gt;must&lt;/strong&gt; be named &lt;code&gt;seed.props&lt;/code&gt; (or
&lt;code&gt;seed.properties&lt;/code&gt;). This file must also be put in the &lt;code&gt;META-INF/configuration&lt;/code&gt; folder. The most frequent usage of this
file is to define the base package(s) that Seed must scan. You can do so with the following :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed]
base-packages = org.my.package, com.my.other.package, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;It is important to set the &lt;code&gt;org.seedstack.seed.base-packages&lt;/code&gt; property of bootstrap configuration for Seed to scan your classes. If you omit to do so, Seed will only scan &lt;code&gt;org.seedstack&lt;/code&gt; and its sub-packages by default.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that the bootstrap configuration contents will also be available as normal application configuration. As such, you can choose to put all your configuration (bootstrap or not) in this file.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;props-format&#34;&gt;Props format&lt;/h2&gt;

&lt;h3 id=&#34;base-characteristics&#34;&gt;Base characteristics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By default, props files are UTF-8 encoded, but can be encoded in any encoding.&lt;/li&gt;
&lt;li&gt;Leading and trailing spaces will be trimmed from section names, property names.&lt;/li&gt;
&lt;li&gt;Either equal sign (=) or colon (:) are used to assign property values.&lt;/li&gt;
&lt;li&gt;Comments begin with either a semicolon (;), or a sharp sign (#) and extend to the end of line. It doesn&amp;rsquo;t have to be
the first character.&lt;/li&gt;
&lt;li&gt;A backslash (&lt;code&gt;\&lt;/code&gt;) escapes the next character (e.g., &lt;code&gt;\#&lt;/code&gt; is a literal &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; is a literal &lt;code&gt;\&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;\uXXXX is encoded as character. Also &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt; and &lt;code&gt;\f&lt;/code&gt; are encoded as characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sections&#34;&gt;Sections&lt;/h3&gt;

&lt;p&gt;Sections looks very much like Windows INI file sections. In props files, a section simply represents a key prefix for
following keys, until the section end or end of file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Section names are enclosed between &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Properties following a section header belong to that section.&lt;/li&gt;
&lt;li&gt;Section name is added as a prefix to section properties.&lt;/li&gt;
&lt;li&gt;Section ends with empty section definition &lt;code&gt;[]&lt;/code&gt; or with new section start or end of file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[users.data]
weight = 49.5
height = 87.7
age = 63

[]
comment=this is base property
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to this one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;users.data.weight = 49.5
users.data.height = 87.7
users.data.age = 63
comment=this is base property
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;profiles&#34;&gt;Profiles&lt;/h3&gt;

&lt;p&gt;Seed provides a configuration profile concept which is activated via the &lt;code&gt;org.seedstack.seed.profiles&lt;/code&gt; system property.
Profiles are determined at application initialization and cannot be changed afterwards. You can activate several profiles
simultaneously by using &lt;strong&gt;a comma separated list&lt;/strong&gt;. For example, following JVM argument activates both &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt;
profiles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-Dorg.seedstack.seed.profiles=dev,debug
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Profile names are enclosed between &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;They can be used as a part of a property key.&lt;/li&gt;
&lt;li&gt;One key can contain one or more profile name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A good practice&lt;/strong&gt; consists in keeping them at the end but they could be used anywhere in a key.&lt;/li&gt;
&lt;li&gt;Properties without a profile are base properties and are available without providing any profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.port=3086

db.url&amp;lt;dev&amp;gt;=localhost
db.username&amp;lt;dev&amp;gt;=root

db.url&amp;lt;prod&amp;gt;=productionmachine.myorganization.org
db.username&amp;lt;prod&amp;gt;=securedaccount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In above example, &lt;code&gt;db.port&lt;/code&gt; key provides a base property that will always be available whereas other keys are dependant
on a profile name (&lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;prod&lt;/code&gt;). Therefore, these values would be available only if the corresponding profiles
(environments here) are requested through JVM &lt;code&gt;org.seedstack.seed.profiles&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;Since profiles can be anywhere in the key name, section names can contain profile definitions as well. The above example
can also be written as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.port=3086

[db&amp;lt;dev&amp;gt;]
url=localhost
username=root

[db&amp;lt;prod&amp;gt;]
url=productionmachine.myorganization.org
username=securedaccount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are cases where two ore more profiles share most of their configuration and only few properties are
different or specific to one profile. To avoid repeating shared properties for each profile, it is possible to define
different/specific properties assigned to inner profiles only. Props will first lookup keys in inner profiles, then go
up to the base level. For example :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key1&amp;lt;one&amp;gt;=Hi!
key2&amp;lt;one&amp;gt;=...
....
key100&amp;lt;one&amp;gt;=...

key1&amp;lt;one.two&amp;gt;=Hola!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example defines two profiles. First one is named &amp;lsquo;one&amp;rsquo; and contains 100 properties. Second profile is an inner
property named &amp;lsquo;one.two&amp;rsquo;. It contains only 1 property (key1) - but all properties from its parent profile are available.&lt;/p&gt;

&lt;h3 id=&#34;macros&#34;&gt;Macros&lt;/h3&gt;

&lt;p&gt;A macro is a reference to some keys&amp;rsquo; value inside the value of another key. Macros are enclosed between &lt;code&gt;${&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. Here is a
simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key1=Something ${foo}
...
foo=nice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Value of key1 is &amp;lsquo;Something nice&amp;rsquo;. Macros can refer to any existing property key, no matter where it is defined. Therefore,
nested macros are also supported as in following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key1=**${key${key3}}**
key3=2
key2=foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Value of key1 is &amp;lsquo;&lt;strong&gt;foo&lt;/strong&gt;&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;multi-line-values&#34;&gt;Multi-line values&lt;/h3&gt;

&lt;p&gt;Multi-lines values are defined with triple-quotes. Everything in-between is considered as a value. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;email.body=&#39;&#39;&#39;
    Hello $n,

    welcome!
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that multi-line values are NOT trimmed. Therefore, the value from the example will consist of 5 lines. There is no
need to escape new lines in multi-line values.&lt;/p&gt;

&lt;h3 id=&#34;value-appending&#34;&gt;Value appending&lt;/h3&gt;

&lt;p&gt;Values with the same key name are automatically appended to each other with a comma (&lt;code&gt;,&lt;/code&gt;) separator. With the following
configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.myorganization.myproject.toto = val1
org.myorganization.myproject.toto = val2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;org.myorganization.myproject.toto&lt;/code&gt; value evaluates to &lt;code&gt;val1,val2&lt;/code&gt;. You can then retrieve this kind of value as a
normal string or as a string array.&lt;/p&gt;

&lt;h3 id=&#34;copy-operator&#34;&gt;Copy operator&lt;/h3&gt;

&lt;p&gt;The copy operator can be used to share a set of properties in different sections by copying them. Consider the following
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.myorganization.myproject1.action1=value1
org.myorganization.myproject1.action2=value2
...
org.myorganization.myproject2.action1=value1
org.myorganization.myproject2.action2=value2
...
org.myorganization.myproject3.... # etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Props allows you to use copy operator: &lt;code&gt;&amp;lt;=&lt;/code&gt; in order to minimize and clarify the declarations required. Above props can
be written as follows instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[actions]
action1=value1
action2=value2
...

[]
org.myorganization.myproject1 &amp;lt;= actions

[org]
myorganization.prd2 &amp;lt;= actions

[org.myorganization.myproject3]
&amp;lt;= actions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example shows 3 different but equivalent ways to use copy operator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;without sections&lt;/li&gt;
&lt;li&gt;with partial section&lt;/li&gt;
&lt;li&gt;with full section&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that copied values are set as macros, so all above copied properties are identical to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.myorganization.myproject1.action1=${actions.action1}
org.myorganization.myproject1.action2=${actions.action2}
org.myorganization.myproject2.action1=${actions.action1}
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All rules for resolving macros apply.&lt;/p&gt;

&lt;h2 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h2&gt;

&lt;p&gt;System environment variables are provided through configuration, using a macro prefixed by &lt;code&gt;env:&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[db]
url = jdbc:mysql://${env:MYSQL_SERVER}/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Please note that the environment variable lookup is case-sensitive&lt;/strong&gt;, contrary to the &lt;code&gt;System.getenv(variableName)&lt;/code&gt; java
method. Its behavior is equivalent to &lt;code&gt;System.getenv().get(variableName)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;system-properties&#34;&gt;System properties&lt;/h2&gt;

&lt;p&gt;JVM system properties are provided through configuration, using a macro prefixed by &lt;code&gt;sys:&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[indexer]
path = ${sys:java.io.tmpdir}${sys:file.separator}my-index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system property lookup is case-sensitive, just as &lt;code&gt;System.getProperty(propertyName)&lt;/code&gt; java method.&lt;/p&gt;

&lt;h2 id=&#34;constant-values&#34;&gt;Constant values&lt;/h2&gt;

&lt;p&gt;Class constant values (i.e. &lt;code&gt;static final&lt;/code&gt; fields) are available in props configuration with &lt;code&gt;const:&lt;/code&gt; prefix.
For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[action1]
key = ${const:java.awt.event.KeyEvent.VK_CANCEL}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value of &lt;code&gt;action1.key&lt;/code&gt; is the value of &lt;code&gt;VK_CANCEL&lt;/code&gt; constant retrieved from &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt; class.&lt;/p&gt;

&lt;h2 id=&#34;override&#34;&gt;Override&lt;/h2&gt;

&lt;p&gt;Nominal configuration can be overridden explicitly using resources names ending with &lt;code&gt;*.override.properties&lt;/code&gt; and
&lt;code&gt;*.override.props&lt;/code&gt;. Nominal and override configuration are loaded completely separately and cannot interact with each
other except in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a key is present both in nominal and override configuration, the override value completely replaces the nominal one.&lt;/li&gt;
&lt;li&gt;If a key is present in override configuration but not in nominal configuration, it is added to the nominal configuration.&lt;/li&gt;
&lt;li&gt;If a key is present both in nominal and override configuration but prefixed by a dash (&lt;code&gt;-&lt;/code&gt;) in override configuration it
is removed from nominal configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, with this nominal configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;overriddenValue = I&#39;m overridden
removedValue = I&#39;m removed
emptiedValue = I&#39;m emptied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this override configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;overriddenValue = I&#39;m overriding
-removedValue =
emptiedValue =
-removedNonExistentValue =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You end with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;overriddenValue&lt;/code&gt; evaluates to &lt;code&gt;&#39;I&#39;m overriding&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emptiedValue&lt;/code&gt; evaluates to an empty string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removedValue&lt;/code&gt; evaluates to &lt;code&gt;null&lt;/code&gt; as if it was never declared in the first place.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Please note that as the nominal and the override configurations are completely separate, no macro resolution can take
place between the two. Also note that the whole property name is used for the dash prefix check, so you can&amp;rsquo;t add the
dash character in a categorized property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[category]
-property1 =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will NOT be removed since the full property name will be &lt;code&gt;category.-property1&lt;/code&gt;. Instead use the following form (outside
any category block):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-category.property1 =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this particularity to remove several keys from the same category:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[-category]
property1 =
property2 =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will remove &lt;code&gt;category.property1&lt;/code&gt; and &lt;code&gt;category.property2&lt;/code&gt; from the nominal configuration.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;dependency-injection&#34;&gt;Dependency injection&lt;/h1&gt;

&lt;p&gt;In a Seed application, the dependency injection is provided by a Guice injector, created by the kernel in its
starting phase. The injector is configured in explicit mode, meaning that all the application injection points
are checked during application startup and must be resolvable. This mode ensures that injection errors are detected as
soon as possible in the development process.&lt;/p&gt;

&lt;p&gt;Although Guice is operating behind the scenes, it is invisible for the application which only needs to rely on JSR 330
annotations for defining injection points.&lt;/p&gt;

&lt;h2 id=&#34;injection-points&#34;&gt;Injection points&lt;/h2&gt;

&lt;p&gt;When applying the dependency injection pattern, the dependencies are passed in instead of being requested directly or
by calling factories. The process of setting dependencies into an object is called injection. In SeedStack the injections
are explicit and almost always marked with the &lt;code&gt;@Inject&lt;/code&gt; annotation. The element marked with the &lt;code&gt;@Inject&lt;/code&gt; annotation
is called the &lt;strong&gt;injection point&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are multiple injection styles, described below, and they all can be used simultaneously.&lt;/p&gt;

&lt;h3 id=&#34;constructor-injection&#34;&gt;Constructor injection&lt;/h3&gt;

&lt;p&gt;Constructor injection combines instantiation with injection. To use it, annotate the constructor with the &lt;code&gt;@Inject&lt;/code&gt;
annotation. This constructor should accept class dependencies as parameters. It is then recommended to assign the
parameters to final fields in the constructor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyServiceImpl implements MyService {
    private final OtherService otherService;

    @Inject
    public MyServiceImpl(OtherService otherService) {
        this.otherService = otherService;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your class has no &lt;code&gt;@Inject&lt;/code&gt;-annotated constructor, a public, no-arguments constructor will be used if it exists,
otherwise an exception will be thrown upon application startup.&lt;/p&gt;

&lt;p&gt;The constructor injection style has two main benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to construct injected immutable instances,&lt;/li&gt;
&lt;li&gt;The explicit constructor arguments will make unit testing easier: when you construct a test instance manually, you
are still required by compiler to provide all the dependencies.&lt;br /&gt;

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;field-injection&#34;&gt;Field injection&lt;/h3&gt;

&lt;p&gt;Fields injection points are fields annotated with &lt;code&gt;@Inject&lt;/code&gt; and are injected just after instance creation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyServiceImpl implements MyService {
    @Inject 
    private OtherService otherService;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avoid using field injection with final fields, which are not guaranteed to succeed in some contexts.&lt;/p&gt;

&lt;h3 id=&#34;method-injection&#34;&gt;Method injection&lt;/h3&gt;

&lt;p&gt;Method injection points are methods annotated with &lt;code&gt;@Inject&lt;/code&gt; are called just after field injections. Dependencies take
the form of parameters, which the injector resolves before invoking the method. Injected methods may have any number of
parameters, and the method name does not impact injection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyServiceImpl implements MyService {
    private OtherService otherService;

    @Inject
    public void doInjection(OtherService otherService) {
        this.otherService = otherService;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;injection-scopes&#34;&gt;Injection scopes&lt;/h2&gt;

&lt;p&gt;By default, the injector returns a new instance each time it supplies a value. This behavior can be altered by applying
a scope to the implementation class. Scopes allow to reuse instances like the &lt;code&gt;@Singleton&lt;/code&gt; scope which will make the
injector always return the same instance for the lifetime of the application. Annotations are used to identify scopes.
Specify the scope for a type by applying the scope annotation to the implementation class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Singleton
public class MyServiceStatefulImpl implements MyService {
    /* everything here should be thread safe! */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default in SeedStack, almost every class managed by the injector has no scope associated, which means that a new
instance is created for each injection. This is a desirable behavior because it minimizes the mutability of your code and, as
such, minimizes the need to use concurrency protection (synchronized, ThreadLocal, &amp;hellip;). In the end, all the bugs associated
with such techniques are avoided.&lt;/p&gt;

&lt;p&gt;In some cases, you&amp;rsquo;ll need to specify a scope though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an object is inherently stateful (like a counter or a cache),&lt;/li&gt;
&lt;li&gt;If an object is expensive to create,&lt;/li&gt;
&lt;li&gt;If an object is tied up to external resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that since the technical aspects that are often the motivation to implement a singleton are already handled by
the framework, it is unlikely that you will need to apply this scope yourself. Remember that by keeping your &lt;strong&gt;application
code as stateless and immutable as possible&lt;/strong&gt; you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the probability of bugs,&lt;/li&gt;
&lt;li&gt;Improve its scalability,&lt;/li&gt;
&lt;li&gt;Improve its testability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;static-injections&#34;&gt;Static injections&lt;/h2&gt;

&lt;p&gt;Injection on static fields is a specific case of injection that requires an explicit binding that is very rarely used
in SeedStack internal code and never in application code. It means that, by default, injection on static fields of your
classes won&amp;rsquo;t be enabled. This is a good thing because static injections are difficult to test, make dependencies opaque
and rely on global state.&lt;/p&gt;

&lt;h2 id=&#34;custom-injections&#34;&gt;Custom injections&lt;/h2&gt;

&lt;p&gt;Custom injections can be used for advanced injection behavior that is not possible to achieve through the standard
&lt;code&gt;@Inject&lt;/code&gt; injection points. They rely instead on specific annotations to trigger the injection. The &lt;code&gt;@Logging&lt;/code&gt; annotation
described &lt;a href=&#34;#logging&#34;&gt;here&lt;/a&gt; is an example of custom injection. SeedStack doesn&amp;rsquo;t rely heavily on custom injection, using
standard injection when possible.&lt;/p&gt;

&lt;h2 id=&#34;method-interception&#34;&gt;Method interception&lt;/h2&gt;

&lt;p&gt;To complement dependency injection, method interception is sometimes used in SeedStack. It allows to execute code each
time a &lt;em&gt;matching&lt;/em&gt; method is invoked. It is suitable for cross cutting concerns (&amp;laquo;aspects&amp;raquo;) and is notably used, among
other things, for transaction and security.&lt;/p&gt;

&lt;p&gt;Method interception is transparent for the application code but its implementation (which works by dynamically sub-classing
and overriding matching methods) impose some limitations that you should know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes must be public or package-private,&lt;/li&gt;
&lt;li&gt;Classes must be non-final,&lt;/li&gt;
&lt;li&gt;Methods must be public, package-private or protected,&lt;/li&gt;
&lt;li&gt;Methods must be non-final,&lt;/li&gt;
&lt;li&gt;Instances must be created by the injector. It is not possible to use method interception on instances that aren&amp;rsquo;t
constructed by the injector.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;For more information about the injector used in the Java framework, you can look at the
&lt;a href=&#34;https://github.com/google/guice/wiki&#34;&gt;Guice documentation wiki&lt;/a&gt;. Please note that some Guice features described
in this documentation are not available in SeedStack or implemented differently. A knowledge of Guice is &lt;strong&gt;NOT&lt;/strong&gt;
necessary to develop a Seed-based application.&lt;/p&gt;

&lt;h1 id=&#34;error-diagnostic&#34;&gt;Error diagnostic&lt;/h1&gt;

&lt;p&gt;Seed can dump diagnostic information when an exception is catched at key application locations. Core support dumps
diagnostic information when an uncaught exception occurs in a thread but other supports can trigger dumps in various
conditions.&lt;/p&gt;

&lt;p&gt;Diagnostic information is an aggregation of values gathered from various diagnostic collectors in a single map. This map
is then handled by the diagnostic reporter.&lt;/p&gt;

&lt;h2 id=&#34;diagnostic-collectors&#34;&gt;Diagnostic collectors&lt;/h2&gt;

&lt;p&gt;A diagnostic collector is a class implementing the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;core.&amp;amp;#8203;spi.&amp;amp;#8203;diagnostic.&amp;amp;#8203;DiagnosticInfoCollector&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/core/spi/diagnostic/DiagnosticInfoCollector.html&#39;&gt;DiagnosticInfoCollector&lt;/a&gt;&lt;/code&gt;
interface and annotated with &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;core.&amp;amp;#8203;spi.&amp;amp;#8203;diagnostic.&amp;amp;#8203;DiagnosticDomain&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/core/spi/diagnostic/DiagnosticDomain.html&#39;&gt;@DiagnosticDomain&lt;/a&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@DiagnosticDomain(&amp;quot;org.my-organization.my-project.my-diagnostic-domain&amp;quot;)
public class MyDiagnosticCollector implements DiagnosticInfoCollector {

    @Override
    public Map&amp;lt;String, Object&amp;gt; collect() {
        ...
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All diagnostic collectors are automatically detected by Seed and will be used in diagnostic information gathering. The
diagnostic domain uniquely identifies the information of the collector.&lt;/p&gt;

&lt;h2 id=&#34;diagnostic-reporter&#34;&gt;Diagnostic reporter&lt;/h2&gt;

&lt;p&gt;The default diagnostic reporter dumps the map as a YAML document in the system temporary directory. The diagnostic
reporter can be changed by setting the &lt;code&gt;org.seedstack.seed.diagnostic.reporter&lt;/code&gt; system property to a class
implementing &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;core.&amp;amp;#8203;spi.&amp;amp;#8203;diagnostic.&amp;amp;#8203;DiagnosticReporter&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/core/spi/diagnostic/DiagnosticReporter.html&#39;&gt;DiagnosticReporter&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/more/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/more/</guid>
      <description>

&lt;h1 id=&#34;jndi&#34;&gt;JNDI&lt;/h1&gt;

&lt;p&gt;Seed provides the ability to inject external JNDI resources through the &lt;code&gt;@Resource&lt;/code&gt; annotation. Multiple JNDI contexts can
be used in an application by using the &lt;code&gt;@FromContext&lt;/code&gt; annotation.&lt;/p&gt;

&lt;h2 id=&#34;declaring-jndi-contexts&#34;&gt;Declaring JNDI contexts&lt;/h2&gt;

&lt;p&gt;The default JNDI context is automatically configured by Seed if you provide a &lt;code&gt;jndi.properties&lt;/code&gt; file in &lt;code&gt;META-INF/configuration&lt;/code&gt; classpath-included folder.
This JNDI context is named &lt;code&gt;default&lt;/code&gt; by Seed.&lt;/p&gt;

&lt;p&gt;Additional JNDI contexts can be specified using the following configuration properties:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;additional-jndi-contexts = additional1, additional2
additional-jndi-context.additional1 = /jndi-ctx-1.properties
additional-jndi-context.additional2 = /jndi-ctx-2.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code defines two additional JNDI contexts, named &lt;code&gt;additional1&lt;/code&gt; and &lt;code&gt;additional2&lt;/code&gt;. The specified properties
files are &lt;code&gt;jndi.properties&lt;/code&gt;-like files.&lt;/p&gt;

&lt;h2 id=&#34;using-jndi-context&#34;&gt;Using JNDI context&lt;/h2&gt;

&lt;h3 id=&#34;declarative-api&#34;&gt;Declarative API&lt;/h3&gt;

&lt;p&gt;You can inject JNDI resource using the &lt;code&gt;@Resource&lt;/code&gt; annotation from JSR-245:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Holder{
    @Resource(name = &amp;quot;THE_JNDI_NAME&amp;quot;)
    private DataSource datasource;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above lookup for &lt;code&gt;THE_JNDI_NAME&lt;/code&gt; in &lt;code&gt;default&lt;/code&gt; JNDI context is injected into &lt;code&gt;datasource&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;In case you have several JNDI contexts in your application, you can specify the context name as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Holder{
    @Resource(name = &amp;quot;THE_JNDI_NAME&amp;quot;)
    @FromContext(&amp;quot;additional1&amp;quot;)
    private DataSource datasource;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;programmatic-api&#34;&gt;Programmatic API&lt;/h3&gt;

&lt;p&gt;You can retrieve any context by injecting it into your code. Then you can use the JNDI programmatic API to lookup
for resources in that context.&lt;/p&gt;

&lt;p&gt;You can inject the &lt;code&gt;default&lt;/code&gt; context as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Holder{
    @Inject
    private Context defaultCtx;

    public void m(){
       MyJNDIResource test = defaultCtx.lookup(&amp;quot;THE_JNDI_NAME&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to precise another context, you can specify the context as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Holder{
    @Inject
    @Named(&amp;quot;additional1&amp;quot;)
    private Context additional1;

    public void m(){
       MyJNDIResource test = additional1.lookup(&amp;quot;THE_JNDI_NAME&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;data-import-export&#34;&gt;Data import/export&lt;/h1&gt;

&lt;p&gt;Seed provides features to backup and restore data. This could be done through &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/operations/#shell&#34;&gt;Seed Shell&lt;/a&gt;
or data could be loaded at the application startup. Data can be backed up and restored independently from the type of
persistence since JSON is used as the pivotal format. Consequently, no SQL script or conversion script is needed. Data
import can also be used to initialize data for integration tests.&lt;/p&gt;

&lt;h2 id=&#34;data-export&#34;&gt;Data Export&lt;/h2&gt;

&lt;p&gt;Your export class has to implement &lt;code&gt;DataExporter&amp;lt;ClassToExport&amp;gt;&lt;/code&gt;. This interface provides an &lt;code&gt;exportData&lt;/code&gt; method
returning the data to export. The class implementing &lt;code&gt;DataExporter&lt;/code&gt; should be annotated with &lt;code&gt;@DataSet&lt;/code&gt; which provides
a functional ID to the data. As below described, &lt;code&gt;@DataSet&lt;/code&gt; takes a &lt;code&gt;group&lt;/code&gt; (eg. application ID) and a &lt;code&gt;name&lt;/code&gt; (eg. the
type of objects being exported).&lt;/p&gt;

&lt;p&gt;Implementation example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@JpaUnit(&amp;quot;seed-i18n-domain&amp;quot;)
@Transactional
@DataSet(group=&amp;quot;seed-i18n&amp;quot;, name=&amp;quot;key&amp;quot;)
public class KeyDataExporter implements DataExporter&amp;lt;KeyDTO&amp;gt; {

    @Inject
    private KeyRepository keyRepository;

    @Inject
    private FluentAssembler fluentAssembler;

    @Override
    public Iterator&amp;lt;KeyDTO&amp;gt; exportData() {
        List&amp;lt;Key&amp;gt; keys = keyRepository.loadAll();
        return fluentAssembler.assemble(keys).to(KeyDTO.class).iterator();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;import-data&#34;&gt;Import data&lt;/h2&gt;

&lt;p&gt;Your export class has to implement &lt;code&gt;DataImporter&amp;lt;ClassToImport&amp;gt;&lt;/code&gt;. This interface provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an &lt;code&gt;isInitialized&lt;/code&gt; method to check before importing data (can be disabled with a property)&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;importData&lt;/code&gt;  method consuming the data to import (eg. feed a staging collection).&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;commit&lt;/code&gt; method to commit data after &lt;code&gt;importData&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;rollback&lt;/code&gt; method to roll back data upon error in prior steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The class implementing &lt;code&gt;DataImporter&lt;/code&gt; should be annotated with &lt;code&gt;@DataSet&lt;/code&gt;. As for Export, this annotation provides
a functional ID to the imported data. As below described, &lt;code&gt;@DataSet&lt;/code&gt; takes a &lt;code&gt;group&lt;/code&gt; (eg. application ID) and a &lt;code&gt;name&lt;/code&gt;
(eg. the type of objects being imported).&lt;/p&gt;

&lt;p&gt;Implementation example from &lt;strong&gt;seed-i18n-function&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Transactional
@DataSet(group=&amp;quot;seed-i18n&amp;quot;, name=&amp;quot;key&amp;quot;)
public class KeyDataImporter implements DataImporter&amp;lt;KeyDTO&amp;gt; {

    @Inject
    private KeyRepository keyRepository;

    private Set&amp;lt;KeyDTO&amp;gt; staging = new HashSet&amp;lt;KeyDTO&amp;gt;();

    @Inject
    private Assemblers assemblers;

    @Override
    public boolean isInitialized() {
        // check if data are already initialized
        ...
        return initialized;
    }

    @Override
    public void importData(KeyDTO data) {
        staging.add(data);
    }

    @Override
    public void commit(boolean clear) {
        if (clear) {
            // delete data before adding new one
            ...
        }
        for (KeyDTO keyDTO : staging) {
            // persist data
            ...
        }
        staging.clear();
    }

    @Override
    public void rollback() {
        staging.clear();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell-command&#34;&gt;Shell command&lt;/h2&gt;

&lt;p&gt;Seed also provides commands to import and export data. You can invoke this kind of commands through
&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/operations/#shell&#34;&gt;Seed Shell&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;core:export
  -g --group : filter on group
  -s --set   : filter on name

core:import
  -c --clear : Clear existing data if import is succeeding
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -t admin@localhost -p 2222 &amp;quot;core:export&amp;quot; &amp;gt; data.json

ssh -t admin@localhost -p 2222 &amp;quot;core:import&amp;quot; &amp;lt; data.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;datamanager&#34;&gt;DataManager&lt;/h2&gt;

&lt;p&gt;If you want to handle import or export from your code, you can do it by injecting the &lt;code&gt;DataManager&lt;/code&gt; class.&lt;/p&gt;

&lt;h2 id=&#34;auto-initialization&#34;&gt;Auto initialization&lt;/h2&gt;

&lt;p&gt;Data can be automatically loaded at the application startup by adding the exported JSON file(s) in
&lt;code&gt;META-INF/data/{group}/{name}.json&lt;/code&gt;. These data files will be loaded unless the application is already initialized
(according to your &lt;code&gt;isInitialized()&lt;/code&gt; method implementation). Initialization can be forced each time this application
is started by adding this property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.seedstack.seed.core]
data-initialization = force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Data loading can also be disabled by setting the property to &lt;code&gt;none&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[org.seedstack.seed.core]
data-initialization = none
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/operations/</guid>
      <description>&lt;p&gt;Seed provides the necessary tools to closely monitor the performance and the availability of your application or service,
and even to take action if necessary. It does so by capturing metrics on key application components and checking their
health status. Custom metrics and health-checks can be defined. If you need to take action, you can execute predefined
or custom management commands through SSH.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-metrics-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-metrics-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-metrics-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-metrics&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-metrics-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-metrics-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-metrics-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-metrics-version, #org-seedstack-seed-seed-metrics-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-metrics-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-metrics-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-metrics:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h1 id=&#34;metrics&#34;&gt;Metrics&lt;/h1&gt;

&lt;p&gt;When enabled, this module will automatically capture key metrics throughout the framework. Additionally it provides the
ability for you to define 5 types of custom metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gauge&lt;/strong&gt;, which simply collects a value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Counter&lt;/strong&gt;, which is an incrementing or decrementing value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Histogram&lt;/strong&gt;, which measures the distribution of values in a stream of data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Meter&lt;/strong&gt;, which measure the rate at which a set of events occur.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timer&lt;/strong&gt;, which combines an histogram of an event duration and a meter of the rate of its occurrence.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Seed metrics module implementation is based on the &lt;a href=&#34;http://metrics.dropwizard.io/&#34;&gt;Metrics&lt;/a&gt; library. Please check its
documentation for more information.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;annotations&#34;&gt;Annotations&lt;/h2&gt;

&lt;p&gt;Metrics can automatically be registered through annotations. To register a Gauge, use the &amp;lt;&lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;Gauge&#39;&gt;@Gauge&lt;/span&gt;&lt;/code&gt;
annotation on any method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Gauge(name = &amp;quot;queueSize&amp;quot;)
public int getQueueSize() {
    return queue.size;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use its &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;CachedGauge&#39;&gt;@CachedGauge&lt;/span&gt;&lt;/code&gt; counterpart which allows for a more efficient
reporting of value which are expensive to calculate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@CachedGauge(name = &amp;quot;queueSize&amp;quot;, timeout = 30, timeoutUnit = TimeUnit.SECONDS)
public int getQueueSize() {
    return queue.getSize();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;Counted&#39;&gt;@Counted&lt;/span&gt;&lt;/code&gt; annotation will create a counter of the invocations of the
method it is applied to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Counted(name = &amp;quot;fancyName&amp;quot;)
public String fancyName(String name) {
    return &amp;quot;Sir Captain &amp;quot; + name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if the &lt;code&gt;monotonic&lt;/code&gt; parameter is set to false, the counter is increment upon method entry and decremented upon
method exit. If set to true, the counter only increments, effectively counting the number of method invocations.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;Metered&#39;&gt;@Metered&lt;/span&gt;&lt;/code&gt; annotation will create a meter which will measure the
rate of invocation of the method it is applied to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Metered(name = &amp;quot;fancyName&amp;quot;)
public String fancyName(String name) {
    return &amp;quot;Sir Captain &amp;quot; + name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its counter-part, the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;ExceptionMetered&#39;&gt;@ExceptionMetered&lt;/span&gt;&lt;/code&gt; annotation will create a meter
which will measure the rate of exception throwing of the method it is applied to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ExceptionMetered
public String fancyName(String name) {
    return &amp;quot;Sir Captain &amp;quot; + name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The more generic &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;annotation.&amp;amp;#8203;Metric&#39;&gt;@Metric&lt;/span&gt;&lt;/code&gt; annotation permits two different uses. When
applied on an empty Metric field, the corresponding metric will be created and injected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Metric
public Meter meter;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When applied on a non-empty Metric field, the metric will be registered:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Metric
public Histogram uniformHistogram = new Histogram(new UniformReservoir());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In both cases, it is up to the client code to interact with the metric.&lt;/p&gt;

&lt;h2 id=&#34;registry&#34;&gt;Registry&lt;/h2&gt;

&lt;p&gt;If you need more control over the metrics registration process, you can inject the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;MetricRegistry&#39;&gt;MetricRegistry&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
MetricRegistry metricRegistry;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also allows you to interact programatically with any registered metrics.&lt;/p&gt;

&lt;h1 id=&#34;health-checks&#34;&gt;Health-checks&lt;/h1&gt;

&lt;p&gt;An health check is a class that will check a specific state of the application and report it. To create an health check,
you must extend the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;com.&amp;amp;#8203;codahale.&amp;amp;#8203;metrics.&amp;amp;#8203;health.&amp;amp;#8203;HealthCheck&#39;&gt;HealthCheck&lt;/span&gt;&lt;/code&gt; class and annotate it with the
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;metrics.&amp;amp;#8203;HealthChecked&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/metrics/HealthChecked.html&#39;&gt;@HealthChecked&lt;/a&gt;&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@HealthChecked
public class GoodHealthCheck extends HealthCheck {
    @Inject
    MyService myService;

    @Override
    protected Result check() throws Exception {
        if (myService.isOk()) {
            return Result.healthy(&amp;quot;I&#39;m fine !&amp;quot;);
        } else {
            return Result.unhealthy(&amp;quot;Boo&amp;quot;);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you have access to any injectable instance in your health check.&lt;/p&gt;

&lt;h1 id=&#34;shell&#34;&gt;Shell&lt;/h1&gt;

&lt;p&gt;Seed shell provides administrative access to application commands through SSH protocol in two different modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interactive mode consists in providing of a simple line-based shell with auto-completion, history and the ability to display
command results as a string. In this mode, commands have no access to low-level input, output and error streams. They
take and produce discrete objects that are displayed as strings.&lt;/li&gt;
&lt;li&gt;Direct mode consists of a single command executed through an ssh remote invocation. In this mode, commands have
access to low-level input, output and error streams and thus can be combined with other commands on the client system.&lt;/li&gt;
&lt;/ul&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-shell-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-shell-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-shell-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-shell&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-shell-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-shell-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-shell-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-shell-version, #org-seedstack-seed-seed-shell-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-shell-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-shell-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-shell:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The configuration properties defining the shell support behavior are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.shell.enabled&lt;/code&gt; which determines if shell access is enabled or not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.shell.port&lt;/code&gt; defines the port the SSH server will listen to. Defaults to 2222.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.seedstack.seed.shell.key.type&lt;/code&gt; defines what type of cryptographic key to use:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;generated&lt;/code&gt; is the simplest and default mode. It generates a key in the application storage directory which is used
in subsequent authentication challenges. &lt;strong&gt;Please note that this key type is NOT secured from a SSH perspective.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; mode specifies the cryptographic key location on the filesystem via the &lt;code&gt;org.seedstack.seed.shell.key.location&lt;/code&gt;
configuration property. The key must be provided in a JCE serialized format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resource&lt;/code&gt; mode specifies the cryptographic key location on the classpath via the &lt;code&gt;org.seedstack.seed.shell.key.location&lt;/code&gt;
configuration property. The key must be provided in a JCE serialized format.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;For security reasons, shell access is disabled by default even when the dependency is in the classpath. If shell access,
is required, set the &lt;code&gt;org.seedstack.seed.shell.enabled&lt;/code&gt; configuration property to &lt;code&gt;true&lt;/code&gt;. &lt;strong&gt;In that case, it is strongly
recommended to configure a real SSH key.&lt;/strong&gt;&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;commands&#34;&gt;Commands&lt;/h2&gt;

&lt;p&gt;All commands registered in the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;CommandRegistry&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/CommandRegistry.html&#39;&gt;CommandRegistry&lt;/a&gt;&lt;/code&gt; can be invoked from both interactive
and direct modes. You can specify command name, arguments and options using a GNU-like syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[scope:]cmdname -s -sval --long-option --long-option-with-arg=argval arg0 arg1 arg2ï¿½
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command scope must be specified as a prefix of the command name, delimited by a colon character.&lt;/li&gt;
&lt;li&gt;Short options are specified using the dash character (-) immediately followed by the option name and a value if needed.&lt;/li&gt;
&lt;li&gt;Long options are specified with two dash characters (&amp;ndash;) immediately followed by the option name and, if required, an equal sign with a value.&lt;/li&gt;
&lt;li&gt;Arguments are specified respecting the command arguments order.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/</guid>
      <description>&lt;p&gt;The SeedStack Maven plugin provides goals to manage SeedStack-based artifacts. To invoke the plugin, use the following
command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn org.seedstack:seedstack-maven-plugin:&amp;lt;goal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you add (or already have) the groupId &lt;code&gt;org.seedstack&lt;/code&gt; in the &lt;code&gt;&amp;lt;pluginGroups&amp;gt;&lt;/code&gt; list of
your maven &lt;code&gt;settings.xml&lt;/code&gt; file, you can use a shorter command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn seedstack:&amp;lt;goal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More information about Maven plugin prefix mapping &lt;a href=&#34;http://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Package goal</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/package/</guid>
      <description>&lt;p&gt;The &lt;code&gt;package&lt;/code&gt; goal packages any self-executable SeedStack application in a &lt;a href=&#34;http://www.capsule.io/&#34;&gt;Capsule&lt;/a&gt;.
A Capsule is a way of packaging and running any application with all its dependencies from a unique plain executable JAR.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Self-executable SeedStack application are applications that contains one and only one implementation of the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;spi.&amp;amp;#8203;SeedLauncher&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/spi/SeedLauncher.html&#39;&gt;SeedLauncher&lt;/a&gt;&lt;/code&gt;
interface in their classpath, like the one provided by the &lt;code&gt;seed-cli&lt;/code&gt; module (for command-line application) or the &lt;code&gt;seed-web-undertow&lt;/code&gt;
module (for embedded Web applications).&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;parameters&#34;&gt;Parameters&lt;/h1&gt;

&lt;p&gt;Parameters can be given as system properties (&lt;code&gt;-DparameterName=parameterValue&lt;/code&gt;) or specified in the &lt;code&gt;pom.xml&lt;/code&gt; plugin declaration:&lt;/p&gt;

&lt;table class=&#34;table table-striped table-bordered table-condensed&#34;&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;Type&lt;/th&gt;
        &lt;th&gt;Mandatory&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;capsuleVersion&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The capsule version to be used. If not given, the latest version discoverable is automatically used.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;classpathEntries&lt;/td&gt;
        &lt;td&gt;List of strings&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The classpath entries to add to the application classpath. Relative paths are resolved to the location of the capsule JAR. The current user home path (~) can be used.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;systemProperties&lt;/td&gt;
        &lt;td&gt;List of strings&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The system properties to set when launching the application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;environmentVariables&lt;/td&gt;
        &lt;td&gt;List of strings&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The environment variables to set when launching the application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;jvmArgs&lt;/td&gt;
        &lt;td&gt;List of strings&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The JVM arguments to apply when launching the application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;allowSnapshots&lt;/td&gt;
        &lt;td&gt;-&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;If specified, the Capsule will allow SNAPSHOT dependencies to be used.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&#34;standalone-capsule&#34;&gt;Standalone Capsule&lt;/h2&gt;

&lt;p&gt;A standalone Capsule packs all its dependencies and is completely self-contained. It is the default mode of operation. To
build such a Capsule, use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn org.seedstack:seedstack-maven-plugin:package
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-a-capsule&#34;&gt;Running a capsule&lt;/h1&gt;

&lt;p&gt;To run a capsule, you simply execute it as a plain executable JAR:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java [jvm-args] -jar my-capsule.jar [args...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to any argument already specified in the capsule manifest (with the plugin parameters described above), you can specify any argument to the JVM or to the program as usual.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;A lot of options can be specified to alter the default behavior of the Capsule itself. Please refer to the &lt;a href=&#34;http://www.capsule.io/user-guide/&#34;&gt;Capsule user-guide&lt;/a&gt;
for more information.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>REST</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/rest/</guid>
      <description>&lt;p&gt;Seed provides support for &lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;Representational State Transfer&lt;/a&gt; (REST) architectural style through the &lt;strong&gt;JAX-RS&lt;/strong&gt;
specification. Implementation rely on &lt;a href=&#34;https://jersey.java.net/&#34;&gt;Jersey&lt;/a&gt;. To enable REST support in your project, add
the &lt;code&gt;seed-rest-jersey2&lt;/code&gt; module.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-rest-jersey2-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-rest-jersey2-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-rest-jersey2-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-rest-jersey2&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-rest-jersey2-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-rest-jersey2-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-rest-jersey2-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-rest-jersey2-version, #org-seedstack-seed-seed-rest-jersey2-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-rest-jersey2-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-rest-jersey2-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-rest-jersey2:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;A &lt;code&gt;seed-rest-jersey1&lt;/code&gt; module is also provided when JAX-RS 2.0 cannot be used in your environment.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;base-prefix&#34;&gt;Base prefix&lt;/h1&gt;

&lt;p&gt;REST resources are exposed on &lt;code&gt;/&lt;/code&gt; by default and have precedence when their path conflict with a static resource. You can choose to change the default prefix by specifying the following configuration property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.rest.path = /api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would place the REST API on its own path, avoiding any conflict with other application resources.&lt;/p&gt;

&lt;h1 id=&#34;jax-rs-basics&#34;&gt;JAX-RS basics&lt;/h1&gt;

&lt;p&gt;Within JAX-RS context, resources are classes annotated with &lt;code&gt;@Path&lt;/code&gt;. All these classes are automatically detected and registered
by Seed. This means that you can inject any other classes managed by Seed in your resources. A new instance of the resource
class is created for each request.&lt;/p&gt;

&lt;p&gt;Below is an example of a simple &amp;laquo;Hello World&amp;raquo; REST resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Path(&amp;quot;/hello&amp;quot;)
public class HelloResource {

    @GET
    @Produces(&amp;quot;text/plain&amp;quot;)
    @Path(&amp;quot;/{msg}&amp;quot;)
    public String sayHello(@PathParam(&amp;quot;msg&amp;quot;) String message) {
        return Response.ok(&amp;quot;Hello &amp;quot; + message).build();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resource is exposed by default on &lt;code&gt;/hello&lt;/code&gt;. You can request the resource with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &#39;http://localhost:8080/hello/world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The returned response body will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;requests&#34;&gt;Requests&lt;/h2&gt;

&lt;p&gt;An HTTP request is mapped to resource method according to its: path, verb and content-type. If no resource method matches
an HTTP request, the HTTP status 405 (Method not allowed) is returned.&lt;/p&gt;

&lt;h3 id=&#34;path&#34;&gt;Path&lt;/h3&gt;

&lt;p&gt;The path is determined by the annotation &lt;code&gt;@Path&lt;/code&gt;. This annotation is &lt;strong&gt;mandatory&lt;/strong&gt; on the class and can be also added
on the method to express the notion of sub-resources. The annotation &lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;value&lt;/a&gt; is the relative URI path but can also
contain a URI template or a regex expression.&lt;/p&gt;

&lt;h3 id=&#34;verb&#34;&gt;Verb&lt;/h3&gt;

&lt;p&gt;HTTP verb is determined by a corresponding annotation. Each verb has its own annotation: &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;, &lt;code&gt;@PUT&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id=&#34;content-type&#34;&gt;Content-type&lt;/h3&gt;

&lt;p&gt;The content type is determined with &lt;code&gt;@Produces(MediaType.APPLICATION_JSON)&lt;/code&gt; and &lt;code&gt;@Consumes(MediaType.APPLICATION_JSON)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;responses&#34;&gt;Responses&lt;/h2&gt;

&lt;p&gt;JAX-RS allows to return a detailed response, with the resource representation and an HTTP status code. For instance the
following resource will return HTTP status code 201 (Created) with the URI of the created resource.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@POST
public Response createPerson(PersonRepresentation pr, @Context UriInfo uriInfo) {
    PersonRepresentation createdPerson = accountService.register(pr);

    URI newUri = new URI(
        uriInfo.getRequestUri().toString() + 
        &amp;quot;/&amp;quot; +  
        createdPerson.getId()
    );

    return Response.created(newUri).entity(createdPerson).build();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exception-handling&#34;&gt;Exception handling&lt;/h2&gt;

&lt;p&gt;Exception handling is an important part of any API design. Carefully designed error handling will allow you to provide
meaningful status codes and messages to the client instead of dumping raw stacktraces in your HTTP response.&lt;/p&gt;

&lt;h3 id=&#34;web-application-exceptions&#34;&gt;Web application exceptions&lt;/h3&gt;

&lt;p&gt;One way to implement clean exception handling in your REST API is to extend the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;WebApplicationException&#39;&gt;WebApplicationException&lt;/span&gt;&lt;/code&gt;
class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class NotFoundException extends WebApplicationException {

    public NotFoundException(String msg) {
        super(Response.status(Response.Status.NOT_FOUND).entity(msg).build());
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the exception is thrown from within a resource method, the server will return an HTTP status code &lt;code&gt;404&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;exception-mappers&#34;&gt;Exception mappers&lt;/h3&gt;

&lt;p&gt;Another way of implementing exception handling is to map existing exceptions to &lt;code&gt;Response&lt;/code&gt; using an &lt;code&gt;ExceptionMapper&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Provider
public class MyBusinessExceptionMapper implements ExceptionMapper&amp;lt;MyBusinessException&amp;gt; {

    @Override
    public Response toResponse(MyBusinessException exception) {
        return Response
                .status(Response.Status.BAD_REQUEST)
                .entity(exception.getMessage())
                .build();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the a &lt;code&gt;MyBusinessException&lt;/code&gt; exception class is thrown from within a resource method, the server will return an HTTP
status code &lt;code&gt;400&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;Testing REST resources can be done in a real Web environment by using &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/testing/#web-integration-tests&#34;&gt;Seed Web integration testing&lt;/a&gt;.
Consider this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductsResourceIT extends AbstractSeedWebIT {

    @ArquillianResource
    private URL baseURL;

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class);
    }

    @RunAsClient
    @Test
    public void testCreate() throws JSONException {
        JSONObject obj = new JSONObject();
        obj.put(&amp;quot;summary&amp;quot;, &amp;quot;The world&#39;s highest resolution notebook&amp;quot;);
        obj.put(&amp;quot;categoryId&amp;quot;, 1);
        obj.put(&amp;quot;designation&amp;quot;, &amp;quot;macbook pro&amp;quot;);
        obj.put(&amp;quot;picture&amp;quot;, &amp;quot;mypictureurl&amp;quot;);
        obj.put(&amp;quot;price&amp;quot;, 200.0);

        String response = expect().statusCode(201).given()
                .header(&amp;quot;Accept&amp;quot;, &amp;quot;application/json&amp;quot;)
                .header(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
                .body(obj.toString())
                .post(baseURL.toString() + &amp;quot;rest/products/&amp;quot;)
                .asString();

        JSONAssert.assertEquals(obj, new JSONObject(response), false);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example uses two libraries for easy REST testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jayway/rest-assured&#34;&gt;REST Assured&lt;/a&gt; which can test various HTTP request/response scenarios.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/skyscreamer/JSONassert&#34;&gt;JSONassert&lt;/a&gt; which can assert conditions on JSON documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;working-with-streams&#34;&gt;Working with streams&lt;/h1&gt;

&lt;h2 id=&#34;send-a-stream&#34;&gt;Send a stream&lt;/h2&gt;

&lt;p&gt;To send bytes (like images) JAX-RS can return special stream:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; @GET
 @Produces(&amp;quot;text/plain&amp;quot;)
 public StreamingOutput  hello() {
     return new StreamingOutput() {
         @Override
         public void write(OutputStream output) throws IOException, WebApplicationException {
             output.write(&amp;quot;Hello World&amp;quot;.getBytes());
         }
    };
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;receive-a-stream&#34;&gt;Receive a stream&lt;/h2&gt;

&lt;p&gt;To read a data stream (file, image or bytes) JAX-RS can inject a Reader or an InputStream :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Path(&amp;quot;/files&amp;quot;)
public class FileResource {

    @POST
    @Path(&amp;quot;/upload&amp;quot;)
    @Consumes(&amp;quot;application/pdf&amp;quot;)
    public void doSomething(InputStream is) {
        readFileWithInputStream(is);
    }

    @POST
    @Path(&amp;quot;/upload-image&amp;quot;)
    public void doSomethingWithReader(@FormDataParam(&amp;quot;file&amp;quot;) Reader reader) {
        readFileWithReader(reader);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;custom-formats&#34;&gt;Custom formats&lt;/h1&gt;

&lt;p&gt;Seed REST support works out-of-the-box with XML and JSON formats. If your project requires a custom format, you can implement
your own readers and/or writers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a class which implements &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;ext.&amp;amp;#8203;MessageBodyWriter&#39;&gt;MessageBodyWriter&lt;/span&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;ext.&amp;amp;#8203;MessageBodyReader&#39;&gt;MessageBodyReader&lt;/span&gt;&lt;/code&gt;
with the custom format specified as the generic type.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;ext.&amp;amp;#8203;Provider&#39;&gt;@Provider&lt;/span&gt;&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;Produces&#39;&gt;@Produces&lt;/span&gt;&lt;/code&gt; if this is a writer.&lt;code&gt;@Produces&lt;/code&gt; and &lt;code&gt;@Consumes&lt;/code&gt; if relevant.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;javax.&amp;amp;#8203;ws.&amp;amp;#8203;rs.&amp;amp;#8203;Consumes&#39;&gt;@Consumes&lt;/span&gt;&lt;/code&gt; if this is a reader.&lt;/li&gt;
&lt;li&gt;Implement the necessary methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More documentation is available in the &lt;a href=&#34;http://docs.oracle.com/javaee/6/api/javax/ws/rs/ext/package-summary.html&#34;&gt;JAX-RS Javadoc&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;restful-api-design&#34;&gt;RESTful API design&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;Representational State Transfer&lt;/a&gt; (REST) architectural style was defined in 2000 by Roy Fielding. This architectural
style defines a set of constraints based on the Web architecture. These constraints are the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client-Server&lt;/li&gt;
&lt;li&gt;Stateless&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Uniform interface&lt;/li&gt;
&lt;li&gt;Layered System&lt;/li&gt;
&lt;li&gt;Code-On-Demand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this section, we will focus on the fourth constraint and how to implement it in a Seed application.&lt;/p&gt;

&lt;h2 id=&#34;uniform-interface&#34;&gt;Uniform interface&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;REST is defined by four interface constraints: identification of
resources; manipulation of resources through representations;
self-descriptive messages; and, hypermedia as the engine of
application state. Roy T. Fielding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;identification-of-resources&#34;&gt;Identification of resources&lt;/h3&gt;

&lt;p&gt;The identification of resources means that each resource should be accessible through an URI. For instance a book &lt;code&gt;123&lt;/code&gt;
will be accessible though the &lt;code&gt;/books/123&lt;/code&gt; URI.&lt;/p&gt;

&lt;h3 id=&#34;manipulation-of-resources-through-representations&#34;&gt;Manipulation of resources through representations&lt;/h3&gt;

&lt;p&gt;Resources should be manipulated through representation. This means that you &lt;strong&gt;should not&lt;/strong&gt; expose your resource (like a
business object) directly because it will make refactoring impossible without breaking the clients.&lt;/p&gt;

&lt;h3 id=&#34;self-descriptive-messages&#34;&gt;Self-descriptive messages&lt;/h3&gt;

&lt;p&gt;The messages should be context-free to respect the stateless constraint. Each message should embedded self-descripting
messaging. For this, the HTTP 1.1 specification defines a list of &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&#34;&gt;HTTP verbs&lt;/a&gt;, &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&#34;&gt;status codes&lt;/a&gt;, and &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14&#34;&gt;headers&lt;/a&gt; to
exchange metadata. For instance the following JAX-RS method specify that the HTTP verb is &lt;code&gt;POST&lt;/code&gt;, it accepts the media
type &lt;code&gt;application/json&lt;/code&gt; and return &lt;code&gt;201&lt;/code&gt; (Created).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@POST
@Consumes(MediaType.APPLICATION_JSON)
public Response createPerson(PersonRepresentation pr, @Context UriInfo uriInfo) {
    PersonRepresentation createdPerson = accountService.register(pr);

    URI newUri = new URI(
        uriInfo.getRequestUri().toString() + 
        &amp;quot;/&amp;quot; + 
        createdPerson.getId()
    );

    return Response.created(newUri).entity(createdPerson).build();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hypermedia-as-the-engine-of-application-state-hateoas&#34;&gt;Hypermedia as the engine of application state (HATEOAS)&lt;/h3&gt;

&lt;p&gt;According to Roy T. Fielding, a REST API is a set of resources that can be explored by following links. Each resource is
a representation of a state of the application and the links are the transitions between those states.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name &amp;laquo;Representational State Transfer&amp;raquo; is intended to evoke an
image of how a well-designed Web application behaves: a network of
web pages (a virtual state-machine), where the user progresses
through the application by selecting links (state transitions),
resulting in the next page (representing the next state of the
application) being transferred to the user and rendered for their
use. Roy T. Fielding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such a Web application has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The state of the application controlled by the server as it tells the client what it can do next.&lt;/li&gt;
&lt;li&gt;It allows the refactoring of server&amp;rsquo;s URI scheme without breaking clients.&lt;/li&gt;
&lt;li&gt;It helps client developers to explore the API.&lt;/li&gt;
&lt;li&gt;It allows the server developers to advertise deprecation or new capabilities by adding hints on existing links or by
adding new links.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The benefits of an hypermedia API are obvious but it is often seen as difficult to implement in real-life applications.&lt;/p&gt;

&lt;p&gt;With Seed, we want to make it so easy that all Seed REST application will support hypermedia by default. In order to do
this, Seed supports two dedicated media types. They are both based on JSON and describe conventions to link to other
resources.&lt;/p&gt;

&lt;h2 id=&#34;json-home&#34;&gt;JSON-HOME&lt;/h2&gt;

&lt;p&gt;To ease REST API discovery, Seed exposes an API home resource with the &lt;a href=&#34;http://tools.ietf.org/html/draft-nottingham-json-home-03&#34;&gt;JSON-HOME&lt;/a&gt; media type. This is similar to a Website
homepage but for REST APIs.&lt;/p&gt;

&lt;p&gt;The goal of the JSON-HOME media type is to expose an home resource which provides all the entry points of the application&amp;rsquo;s
API. It tells the client developer what it can do and give him hints on how to use the resources.&lt;/p&gt;

&lt;p&gt;The following example shows a JSON-HOME resource with two entry points &amp;laquo;widgets&amp;raquo; and &amp;laquo;widget&amp;raquo;. For the &amp;laquo;widgets&amp;raquo; resource,
the JSON-HOME provides just an href indicating the URI of the resource. But for the &amp;laquo;widget&amp;raquo; resource, the JSON-HOME provides
an href-template instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;GET / HTTP/1.1
Host: example.org
Accept: application/json-home

HTTP/1.1 200 OK
Content-Type: application/json-home
Cache-Control: max-age=3600
Connection: close

{
  &amp;quot;resources&amp;quot;: {
    &amp;quot;http://example.org/rel/widgets&amp;quot;: {
      &amp;quot;href&amp;quot;: &amp;quot;/widgets/&amp;quot;
    },
    &amp;quot;http://example.org/rel/widget&amp;quot;: {
      &amp;quot;href-template&amp;quot;: &amp;quot;/widgets/{widget_id}&amp;quot;,
      &amp;quot;href-vars&amp;quot;: {
        &amp;quot;widget_id&amp;quot;: &amp;quot;http://example.org/param/widget&amp;quot;
      },
      &amp;quot;hints&amp;quot;: {
        &amp;quot;allow&amp;quot;: [&amp;quot;GET&amp;quot;, &amp;quot;PUT&amp;quot;, &amp;quot;DELETE&amp;quot;, &amp;quot;PATCH&amp;quot;],
        &amp;quot;formats&amp;quot;: {
          &amp;quot;application/json&amp;quot;: {}
        },
        &amp;quot;accept-patch&amp;quot;: [&amp;quot;application/json-patch&amp;quot;],
        &amp;quot;accept-post&amp;quot;: [&amp;quot;application/xml&amp;quot;],
        &amp;quot;accept-ranges&amp;quot;: [&amp;quot;bytes&amp;quot;]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To expose a JAX-RS resource in the JSON-HOME resource, annotate the resource with &lt;code&gt;@Rel&lt;/code&gt; and set the home attribute to
&lt;code&gt;true&lt;/code&gt;. The annotation can be on the class or the method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Rel(value = CatalogRels.PRODUCT, home = true) // Add it to JSON-HOME
@Path(&amp;quot;/products/{title}&amp;quot;)
@Produces({MediaType.APPLICATION_JSON, &amp;quot;application/hal+json&amp;quot;})
public class ProductResource {

    @GET
    public Response getProduct() {
        ...
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hypertext-application-language-hal&#34;&gt;Hypertext Application Language (HAL)&lt;/h2&gt;

&lt;p&gt;Beyond providing an &amp;laquo;API homepage&amp;raquo;, you have to provide a way to navigate between these pages. That&amp;rsquo;s the role of the
&lt;a href=&#34;https://tools.ietf.org/html/draft-kelly-json-hal-06&#34;&gt;HAL+JSON&lt;/a&gt; media type, which establishes conventions for expressing hypermedia controls. An HAL representation
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;GET /orders HTTP/1.1
Host: example.org
Accept: application/hal+json

HTTP/1.1 200 OK
Content-Type: application/hal+json

{
  &amp;quot;_links&amp;quot;: {
    &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/orders&amp;quot; },
    &amp;quot;next&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/orders?page=2&amp;quot; },
    &amp;quot;find&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/orders{?id}&amp;quot;, &amp;quot;templated&amp;quot;: true }
  },
  &amp;quot;_embedded&amp;quot;: {
    &amp;quot;orders&amp;quot;: [{
        &amp;quot;_links&amp;quot;: {
          &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/orders/123&amp;quot; },
          &amp;quot;basket&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/baskets/98712&amp;quot; },
          &amp;quot;customer&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/customers/7809&amp;quot; }
        },
        &amp;quot;total&amp;quot;: 30.00,
        &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;,
        &amp;quot;status&amp;quot;: &amp;quot;shipped&amp;quot;,
      },{
        &amp;quot;_links&amp;quot;: {
          &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/orders/124&amp;quot; },
          &amp;quot;basket&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/baskets/97213&amp;quot; },
          &amp;quot;customer&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;/customers/12369&amp;quot; }
        },
        &amp;quot;total&amp;quot;: 20.00,
        &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;,
        &amp;quot;status&amp;quot;: &amp;quot;processing&amp;quot;
    }]
  },
  &amp;quot;currentlyProcessing&amp;quot;: 14,
  &amp;quot;shippedToday&amp;quot;: 20
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is a JSON representation with just two reserved keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_links&lt;/code&gt;: this property is used to share links to other resources. Links are represented as a set of keys and
values. The keys represents a relation type (rel) and the value a link object. The only required value of the link object
is &lt;code&gt;href&lt;/code&gt; which can be an URI or an URI template (&lt;code&gt;/orders{?id}&lt;/code&gt;). By convention, a resource always returns a &lt;code&gt;self&lt;/code&gt; link
with its own URI. However, the propery &lt;code&gt;_links&lt;/code&gt; is optional. For more information on link object see the &lt;a href=&#34;https://tools.ietf.org/html/draft-kelly-json-hal-06#section-5&#34;&gt;section 5&lt;/a&gt; of
the specification.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_embedded&lt;/code&gt;: this property is a set of keys and values. Keys are relation types and values can be a resource object or
an array of resource objects. The embedded resources can be full or partial representations of a resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;building-hal-links&#34;&gt;Building HAL links&lt;/h3&gt;

&lt;p&gt;Concatenating strings for building hrefs can quickly become painful and error-prone. With Seed, you have access to a
&lt;code&gt;RelRegistry&lt;/code&gt; which can greatly simplify the task. This registry contains all the resources annotated by &lt;code&gt;@Rel&lt;/code&gt; and their
href. HAL links can have two distinct forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An expanded form, where all variables are sent already resolved to the client,&lt;/li&gt;
&lt;li&gt;A templated form, where the URI template is sent to the client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Path(&amp;quot;/products&amp;quot;)
public class ProductsResource {

    GET
    Rel(value = &amp;quot;products&amp;quot;) // defines the resource rel
    Produces({MediaType.APPLICATION_JSON, &amp;quot;application/hal+json&amp;quot;})
    public Response products(@DefaultValue(&amp;quot;0&amp;quot;) @QueryParam(&amp;quot;pageIndex&amp;quot;) Integer pageIndex,
                            @DefaultValue(&amp;quot;10&amp;quot;) @QueryParam(&amp;quot;pageSize&amp;quot;) Integer pageSize) {
       ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expanded link can be created as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Link link = relRegistry.uri(&amp;quot;products&amp;quot;) // points to the resource rel
                         .set(&amp;quot;pageIndex&amp;quot;, pageIndex)
                         .set(&amp;quot;pageSize&amp;quot;, pageSize);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the following JSON sent to the client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ 
    &amp;quot;href&amp;quot;: &amp;quot;/products?pageIndex=0&amp;amp;pageSize=10&amp;quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The templated link can be created as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Link link = relRegistry.uri(&amp;quot;products&amp;quot;) // points to the resource rel
                         .set(&amp;quot;pageIndex&amp;quot;, pageIndex)
                         .set(&amp;quot;pageSize&amp;quot;, pageSize)
                         .templated();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the following JSON sent to the client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ 
    &amp;quot;href&amp;quot;: &amp;quot;/products{?pageIndex,pageSize}&amp;quot;, 
    &amp;quot;templated&amp;quot;: true 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that seed will automatically use the Servlet context path and the REST prefix to build HAL links, alleviating the need for you
to build any URI manually.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;creating-hal-representations&#34;&gt;Creating HAL representations&lt;/h3&gt;

&lt;p&gt;Seed provides two options to simplify the creation of HAL representations. First, you can take an existing representation
and transform it to an HAL representation using the &lt;code&gt;HALBuilder&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject RelRegistry relRegistry;

...

HalRepresentation representation = HalBuilder.create(productRepresentation)
                .self(relRegistry.uri(&amp;quot;products&amp;quot;).set(&amp;quot;id&amp;quot;, productId)
                .link(relRegistry.uri(&amp;quot;find&amp;quot;).templated())
                .embedded(&amp;quot;related&amp;quot;, relatedProducts);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second option is to make your representation inherit the &lt;code&gt;HalRepresentation&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductsRepresentation extends HalRepresentation {
    private long totalSize;
    private long currentPage;

    ProductsRepresentation() {
    }

    public ProductsRepresentation(List&amp;lt;Product&amp;gt; products, int totalSize, int pageIndex) {
        this.totalSize = totalSize;
        this.currentPage = pageIndex;
        embedded(&amp;quot;products&amp;quot;, products);
    }

    public long getTotalSize() {
        return totalSize;
    }

    public long getCurrentPage() {
        return currentPage;
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Run goal</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/maven-plugin/run/</guid>
      <description>&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; goal runs any self-executable SeedStack application directly from the command line.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Self-executable SeedStack application are applications that contains one and only one implementation of the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;spi.&amp;amp;#8203;SeedLauncher&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/spi/SeedLauncher.html&#39;&gt;SeedLauncher&lt;/a&gt;&lt;/code&gt;
interface in their classpath, like the one provided by the &lt;code&gt;seed-cli&lt;/code&gt; module (for command-line application) or the &lt;code&gt;seed-web-undertow&lt;/code&gt;
module (for embedded Web applications).&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;parameters&#34;&gt;Parameters&lt;/h1&gt;

&lt;p&gt;Parameters should be given as system properties (&lt;code&gt;-DparameterName=parameterValue&lt;/code&gt;):&lt;/p&gt;

&lt;table class=&#34;table table-striped table-bordered table-condensed&#34;&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;Type&lt;/th&gt;
        &lt;th&gt;Mandatory&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;args&lt;/td&gt;
        &lt;td&gt;String&lt;/td&gt;
        &lt;td&gt;No&lt;/td&gt;
        &lt;td&gt;The string of all arguments used to run the Seed application. &lt;strong&gt;Required.&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&#34;web-application&#34;&gt;Web application&lt;/h2&gt;

&lt;p&gt;By running the following command on a SeedStack application containing the &lt;code&gt;seed-web-undertow&lt;/code&gt; dependency (like the
&lt;a href=&#34;https://github.com/seedstack/catalog-microservice-sample&#34;&gt;catalog micro-service sample&lt;/a&gt;), you will startup the application
with its embedded &lt;a href=&#34;http://undertow.io/&#34;&gt;Undertow Web server&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn org.seedstack:seedstack-maven-plugin:run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cli-application&#34;&gt;CLI application&lt;/h2&gt;

&lt;p&gt;By running the following command on a SeedStack application containing the &lt;code&gt;seed-cli&lt;/code&gt; dependency (like the
&lt;a href=&#34;https://github.com/seedstack/samples/tree/master/batch&#34;&gt;batch sample&lt;/a&gt;), you will startup the application with the
corresponding arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn seedstack:run -Dargs=&amp;quot;run-job --job helloWorldJob&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that a SeedStack CLI application needs at least one &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;cli.&amp;amp;#8203;CommandLineHandler&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/cli/CommandLineHandler.html&#39;&gt;CommandLineHandler&lt;/a&gt;&lt;/code&gt; in the
classpath which name must be specified as an argument. In this example we assume that the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons/spring-bridge/batch/&#34;&gt;SeedStack Spring bridge add-on&lt;/a&gt;
&lt;code&gt;run-job&lt;/code&gt; command-line handler is also present in the classpath.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Runtime</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/runtime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/runtime/</guid>
      <description>&lt;p&gt;The SeedStack Java framework is designed to work equally well and provide the same level of features in a standalone or
a managed environment.&lt;/p&gt;

&lt;h1 id=&#34;java&#34;&gt;Java&lt;/h1&gt;

&lt;p&gt;The Java framework is tested and compatible with the following versions of Java:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java 6 (minimum required version),&lt;/li&gt;
&lt;li&gt;Java 7,&lt;/li&gt;
&lt;li&gt;Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Please note that some add-ons may require a minimum version of greater than Java 6.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;web&#34;&gt;Web&lt;/h1&gt;

&lt;p&gt;When used in a Web environment, the Java framework only requires a &lt;strong&gt;standard Servlet 3+ container&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;embedded-servlet-container&#34;&gt;Embedded Servlet container&lt;/h2&gt;

&lt;p&gt;An embedded Servlet container, based upon &lt;a href=&#34;http://undertow.io&#34;&gt;Undertow&lt;/a&gt;, is provided with the following dependency:&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-web-undertow-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-web-undertow-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-web-undertow-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-web-undertow&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-web-undertow-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-web-undertow-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-web-undertow-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-web-undertow-version, #org-seedstack-seed-seed-web-undertow-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-web-undertow-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-web-undertow-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-web-undertow:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It is lightweight, robust, very fast and can be used to produce full-fledged Web applications packaged in &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/maven-plugin/package&#34;&gt;standalone
executable JARs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;external-servlet-container&#34;&gt;External Servlet container&lt;/h2&gt;

&lt;p&gt;Should you require the usage of an external Servlet container like Tomcat, the Java framework is automatically tested and
fully compatible with several popular Servlet containers, listed below.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;A JEE container is &lt;strong&gt;NOT&lt;/strong&gt; necessary for running SeedStack Java applications but can be used if needed.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/security/</guid>
      <description>&lt;p&gt;Seed provides application security through a powerful security model, which is equally easy to configure and to enforce.
It takes charge of the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identification (provides the identity of a subject),&lt;/li&gt;
&lt;li&gt;Authentication (verifies the subject identity),&lt;/li&gt;
&lt;li&gt;Authorization (defines which roles and permissions a subject can have),&lt;/li&gt;
&lt;li&gt;Access-control (enforces access restrictions to entry-points and/or to any arbitrary code).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To enable security to your project, you need to add the &lt;code&gt;seed-security-core&lt;/code&gt; module. 




    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-security-core-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-security-core-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-security-core-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-security-core&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-security-core-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-security-core-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-security-core-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-security-core-version, #org-seedstack-seed-seed-security-core-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-security-core-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-security-core-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-security-core:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In a Web application, you may want to enable HTTP-based security by adding the &lt;code&gt;seed-web-security&lt;/code&gt; module. 




    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-web-security-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-web-security-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-web-security-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-web-security&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-web-security-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-web-security-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-web-security-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-web-security-version, #org-seedstack-seed-seed-web-security-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-web-security-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-web-security-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-web-security:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;The internal security engine is &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt;. Seed provides additional benefits on top of Shiro
such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy, unified configuration.&lt;/li&gt;
&lt;li&gt;Built-in security realms such as LDAP, X509 certificate or configuration-based.&lt;/li&gt;
&lt;li&gt;A plugin mechanism to dynamically register additional entry point security.&lt;/li&gt;
&lt;li&gt;Security scopes which restrict roles and permissions to specified scopes, like a geographical area.&lt;/li&gt;
&lt;li&gt;Data security which can nullify or obfuscate object attributes based on subject authorizations.&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;definitions&#34;&gt;Definitions&lt;/h1&gt;

&lt;h2 id=&#34;subject&#34;&gt;Subject&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;subject&lt;/em&gt; is defined as any entity that request access to an &lt;em&gt;object&lt;/em&gt;. For instance, subject are often end-users which
request to access a specific resource through a User-Interface. But subjects can really be anything like a remote computer
or a local program.&lt;/p&gt;

&lt;h2 id=&#34;principal&#34;&gt;Principal&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;principal&lt;/em&gt; is a defining characteristic of a subject that can be uniquely identified, like an identifier, a name,
a social-security number, a language, etc&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;user&lt;/em&gt; is a specific kind of subject that is defined by principals usually referring to a human operator, like a name
or a user-identifier.&lt;/p&gt;

&lt;h2 id=&#34;identification&#34;&gt;Identification&lt;/h2&gt;

&lt;p&gt;Identification is the process of uniquely tracking a subject across its interactions with the system.&lt;/p&gt;

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;Authentication is the process of verifying the subject identity by validating a proof of identity. This is usually done
by submitting a principal identifying the subject (like a user-identifier) and a proof of identity that the system
understands and trusts, such as a password, a certificate or any other mean.&lt;/p&gt;

&lt;h2 id=&#34;authorization&#34;&gt;Authorization&lt;/h2&gt;

&lt;p&gt;Authorization is the process of determining an access policy for a subject. This is done by compiling all granted rights
into an access policy.&lt;/p&gt;

&lt;h2 id=&#34;access-control&#34;&gt;Access control&lt;/h2&gt;

&lt;p&gt;Access control is the process of verifying the authorizations of a subject relative to an object. It enforces the policy
that is used to determine &lt;em&gt;who&lt;/em&gt; has access to &lt;em&gt;what&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;model&#34;&gt;Model&lt;/h1&gt;

&lt;p&gt;Seed provides a security meta-model that is easy to understand yet powerful enough for the most complex applications. This
meta-model revolves around three main concepts: permissions, roles and subject. It allows to define a fine-grained and
modular security policy.&lt;/p&gt;

&lt;h2 id=&#34;permissions&#34;&gt;Permissions&lt;/h2&gt;

&lt;p&gt;Permissions are the most atomic elements of a security policy. They describe concrete actions and represent what can
be done in an application. A well-formed permission statement describes one or more resource(s) and what actions are
possible when a subject interacts with those resources. Consider the following examples of permissions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open a file,&lt;/li&gt;
&lt;li&gt;Print a document,&lt;/li&gt;
&lt;li&gt;Access the &lt;code&gt;/products&lt;/code&gt; Web resource,&lt;/li&gt;
&lt;li&gt;Delete an order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CRUD actions can frequently be found in permissions but any meaningful verb can be used. The fundamental idea is that
a permission should combine a resource description with an action description.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Permission statements reflect behavior (actions associated with resource types) only. They do &lt;strong&gt;not&lt;/strong&gt; reflect who is able to
perform such behavior. Defining who (which subject) can do what (which permission) is done by assigning permission to
subjects.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;simple-usage&#34;&gt;Simple usage&lt;/h3&gt;

&lt;p&gt;The simplest expression of a permission is a single term String:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printDocument
deleteDocument
viewDocument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These permissions represent the ability to &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; or &lt;code&gt;view&lt;/code&gt; a document. This very basic form of permission requires
to be granted one-by-one or with a &lt;code&gt;*&lt;/code&gt; wildcard, which will grant all the permissions of the application. This may work
in the simplest applications but it is not recommended. The &lt;em&gt;multi-level&lt;/em&gt; permissions should be preferred.&lt;/p&gt;

&lt;h3 id=&#34;multi-level&#34;&gt;Multi-level&lt;/h3&gt;

&lt;p&gt;Instead of expressing the permission as a single term, a multi-level permission can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document:print
document:delete
document:view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The colon (&lt;code&gt;:&lt;/code&gt;) is a special character that is used to delimit the different parts of a multi-level permission. There
are no enforced requirements on how a multi-level permission should be organized, but it is recommended to go from the most
general to the most specific, from left to right. Also, there is no limit to the number of parts.&lt;/p&gt;

&lt;h3 id=&#34;multiple-values&#34;&gt;Multiple values&lt;/h3&gt;

&lt;p&gt;Each part can contain multiple values, separated by commas (&lt;code&gt;,&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document:print,view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When assigning this permission to a subject, this grants the ability to &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; documents.&lt;/p&gt;

&lt;h3 id=&#34;all-values&#34;&gt;All values&lt;/h3&gt;

&lt;p&gt;To grant all permissions of a specific level, use the &lt;code&gt;*&lt;/code&gt; wildcard character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document:*
*:view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first permission, when assigned to a subject, allow to do any action on documents (meaning that any permission check
of the &lt;code&gt;document:XXX&lt;/code&gt; pattern will be granted). The second permission grants the view action on all application resources
(meaning that any permission check of the &lt;code&gt;XXX:view&lt;/code&gt; pattern will be granted).&lt;/p&gt;

&lt;h3 id=&#34;instance-level-checks&#34;&gt;Instance-level checks&lt;/h3&gt;

&lt;p&gt;The identifier of a specific instance can be used at the end of a permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document:print:doc273
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This permission allows to print the document identified by the &lt;code&gt;doc273&lt;/code&gt; identifier.&lt;/p&gt;

&lt;h3 id=&#34;missing-parts&#34;&gt;Missing parts&lt;/h3&gt;

&lt;p&gt;Missing parts in permissions imply that the user has access to all values corresponding to that part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printer:print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This permission is equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printer:print:*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you can only leave off parts from the &lt;em&gt;end&lt;/em&gt; of the permission.&lt;/p&gt;

&lt;h2 id=&#34;roles&#34;&gt;Roles&lt;/h2&gt;

&lt;p&gt;A Role is a named entity that typically represents a set of behaviors or responsibilities. Those behaviors translate to
things you can or can&amp;rsquo;t do with an application. Roles are typically assigned to subject like user accounts, so by
association, subjects can &lt;em&gt;do&lt;/em&gt; the things attributed to various roles. There are two kinds of roles that can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Implicit roles&lt;/strong&gt;: nothing is explicitly expressed in the application to assign permissions to implicit roles. The
allowed behavior is implicitly derived from the role name only. For instance the &lt;code&gt;admin&lt;/code&gt; role can do any administration
task and those administration task are protected by a checking if the subject has the &lt;code&gt;admin&lt;/code&gt; role. This kind of role,
while superficially simpler, is &lt;strong&gt;strongly discouraged&lt;/strong&gt;. Adding, removing or redefining such roles later in the life of
an application will be difficult, costly and may lead to holes in the security model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explicit roles&lt;/strong&gt;: they are expressed as a named collection of actual permissions. In this form, the allowed behavior
is explicitly defined and the code only contains specific permission checks which directly relates to the code behavior.
Altering the security model later in the life of an application will be easy and won&amp;rsquo;t require to change existing code
with the potential security implications. This kind of role, is &lt;strong&gt;recommended&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;subjects&#34;&gt;Subjects&lt;/h2&gt;

&lt;p&gt;Subjects represent the entity which executes actions on the application. The most common type of subject is the &lt;code&gt;User&lt;/code&gt;
type, which represents a human operator interacting with the application. Subjects are allowed to perform certain actions
in your application through their association with roles or direct permissions. Assigning roles and permissions to subjects
is done through a &lt;code&gt;Realm&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h2 id=&#34;realms&#34;&gt;Realms&lt;/h2&gt;

&lt;p&gt;A realm implementation role is to translate a specific data-model, like an LDAP directory or a set of database tables,
into a security policy expressed with the security meta-model described above. Seed provides several predefined realms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ConfigurationRealm&lt;/code&gt; which computes the security policy from specific properties in the application configuration.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;X509CertificateRealm&lt;/code&gt; which computes the security policy from an X509 certificate.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;LdapRealm&lt;/code&gt; which computes the security policy from requests to a configured LDAP directory. This realm is available
in the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons/ldap/&#34;&gt;LDAP add-on&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Custom realms can be implemented to compute any data-model into an enforceable security policy.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Beyond defining the security model of the application, the security infrastructure must be configured.&lt;/p&gt;

&lt;h2 id=&#34;realm-configuration&#34;&gt;Realm configuration&lt;/h2&gt;

&lt;p&gt;A Realm is a component that can access specific security data such as users, roles, and permissions. The Realm translates
this specific data into a format that is understood by the security engine. There is usually a 1-to-1 relation between
a realm and a datasource, such as an LDAP directory, a set of relational tables or configuration properties.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Most of the security datasources usually store both authentication and authorization data, so a realm can perform both
the authentication and authorization tasks.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To specify the realm(s) to enable, use the following configuration property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.security.realms = list of realms to use
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The realm name correspond to the simple name of the Java class that implements the realm. For instance to enable the
LDAP realm (which is implemented in the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;ldap.&amp;amp;#8203;internal.&amp;amp;#8203;realms.&amp;amp;#8203;LDAPRealm&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/ldap/internal/realms/LDAPRealm.html&#39;&gt;LDAPRealm&lt;/a&gt;&lt;/code&gt; Java class), use
the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.security.realms = LdapRealm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the property is not specified, the default realm is &lt;code&gt;ConfigurationRealm&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that you can specify multiple realms. In that case the realms are tried in sequence and if at least one realm
successfully authenticates the subject, the overall attempt is considered successful. If none authenticate successfully,
the attempt fails. The data from all the successful realms are merged.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;configuration-realm&#34;&gt;Configuration realm&lt;/h3&gt;

&lt;p&gt;This realm relies on the application configuration to authenticate subject and retrieve their roles. It is mainly intended
to be used for testing purposes. To declare subjects (called users in this realm), use the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.security.users]
user1 = password, role1, role2
user2 = password, role3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will define two subjects, &lt;code&gt;user1&lt;/code&gt; and &lt;code&gt;user2&lt;/code&gt; with their respective passwords and roles.&lt;/p&gt;

&lt;h3 id=&#34;x509-realm&#34;&gt;X509 realm&lt;/h3&gt;

&lt;p&gt;This realm, which is intended to be used in a Web context, uses the certificates authorized by the Web server when an SSL
connection is in use. It stores the certificates in the user principals as well as the UID declared in the certificate.
It also uses the CN of the issuer of the certificates to define the basic roles of the user.&lt;/p&gt;

&lt;h3 id=&#34;ldap-realm&#34;&gt;LDAP realm&lt;/h3&gt;

&lt;p&gt;Check the &lt;a href=&#34;http://seedstack.org/archives/16.7/addons/ldap/&#34;&gt;LDAP add-on documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;role-permission-resolver&#34;&gt;Role/permission resolver&lt;/h2&gt;

&lt;p&gt;There is a role/permission resolver component per Realm. It resolves the Permissions assigned to a Role and provides them
to the Realm. To attach a role/permission resolver to a Realm, use the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.security.&amp;lt;RealmName&amp;gt;.role-permission-resolver = ConfigurationRolePermissionResolver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;RealmName&amp;gt;&lt;/code&gt; corresponds to the name of the Realm this role/permission resolver is mapped to. The value corresponds
to the simple name of the implementing Java class. When no resolver is specified, the configuration-based role/permission
resolver is used.&lt;/p&gt;

&lt;h3 id=&#34;configuration-based-role-permission&#34;&gt;Configuration-based role/permission&lt;/h3&gt;

&lt;p&gt;This role/permission resolver uses the application configuration to do resolution. You can assign permissions to roles
with the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.security.permissions]
role1 = permission1a:permission1b, permission2a:permission2b
role2 = permission3, permission4a:permission4b
role3 = permission5
role4 = permission6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration assign permissions listed in values to their respective roles as keys. This is the default role/permission
resolver.&lt;/p&gt;

&lt;h2 id=&#34;role-mapping&#34;&gt;Role mapping&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Optionally&lt;/strong&gt;, roles provided by realms can be mapped to application-specific roles. To do this, a role mapping component
should be defined in configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;org.seedstack.seed.security.&amp;lt;RealmName&amp;gt;.role-mapping = ConfigurationRoleMapping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;RealmName&amp;gt;&lt;/code&gt; corresponds to the name of the Realm this role mapping component is mapped to. The value corresponds
to the simple name of the implementing Java class. When no mapping is specified, the configuration-based role mapping
is used.&lt;/p&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;When no role mapping is specified, the roles provided by realms are directly used as application roles.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;configuration-based-role-mapping&#34;&gt;Configuration-based role mapping&lt;/h3&gt;

&lt;p&gt;This role mapping uses the application configuration to do the mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.security.roles]
role1 = ORG.APP.ROLE1, ORG.GLOBAL.ADMIN
role2 = ORG.APP.ROLE2
role3 = ORG.APP.{location}.ROLE3
role4 = *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration defines the following mappings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application-role &lt;code&gt;role1&lt;/code&gt; is attributed to the subject when the realm provides &lt;code&gt;ORG.APP.ROLE1&lt;/code&gt; &lt;strong&gt;OR&lt;/strong&gt; &lt;code&gt;ORG.GLOBAL.ADMIN&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Application-role &lt;code&gt;role2&lt;/code&gt; is attributed to the subject when the realm provides &lt;code&gt;ORG.APP.ROLE2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Application-role &lt;code&gt;role3&lt;/code&gt; is attributed to the subject when the realm provides &lt;code&gt;ORG.APP.FR.ROLE3&lt;/code&gt;, where &lt;code&gt;FR&lt;/code&gt; is converted
into a security scope. As such a scoped &lt;code&gt;role3&lt;/code&gt; is attributed to the subject, which is only valid in &lt;code&gt;FR&lt;/code&gt; location.&lt;/li&gt;
&lt;li&gt;Application-role &lt;code&gt;role4&lt;/code&gt; is attributed to every subject authenticated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;The following example is based on the defaults: a &lt;code&gt;ConfigurationRealm&lt;/code&gt;, a &lt;code&gt;ConfigurationRolePermissionResolver&lt;/code&gt; and a &lt;code&gt;ConfigurationRoleMapping&lt;/code&gt;. Their declaration is optional but present here for clarity. You may want to replace each by a more suitable component, especially the &lt;code&gt;ConfigurationRealm&lt;/code&gt; which uses the configuration as its users repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.security]
realms = ConfigurationRealm
ConfigurationRealm.role-mapping = ConfigurationRoleMapping
ConfigurationRealm.role-permission-resolver = ConfigurationRolePermissionResolver

[org.seedstack.seed.security.users]
admin = password1, APP.ADMIN
user1 = password2, APP.FR.MANAGER, APP.UK.MANAGER
user2 = password3, APP.BASIC

[org.seedstack.seed.security.roles]
admin = APP.ADMIN
manager = APP.ADMIN, APP.{location}.MANAGER
normal = APP.ADMIN, APP.BASIC
guest = *

[org.seedstack.seed.security.permissions]
admin = users:clear, cache:invalidate
manager = users:delete, users:create
normal = users:list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application-roles (&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;guest&lt;/code&gt;) are attributed to a subject if it has &lt;strong&gt;at least one&lt;/strong&gt; of the corresponding realm roles (&lt;code&gt;APP.ADMIN&lt;/code&gt;, &lt;code&gt;APP.FR.MANAGER&lt;/code&gt; , &lt;code&gt;APP.UK.MANAGER&lt;/code&gt;, &lt;code&gt;APP.BASIC&lt;/code&gt;). For instance, having the &lt;code&gt;APP.ADMIN&lt;/code&gt; realm role is enough to have the &lt;code&gt;manager&lt;/code&gt; application-role.&lt;/li&gt;
&lt;li&gt;Subject &lt;code&gt;user1&lt;/code&gt; will only have the &lt;code&gt;users:delete&lt;/code&gt; and &lt;code&gt;users:create&lt;/code&gt; permissions on &lt;code&gt;FR&lt;/code&gt; and &lt;code&gt;UK&lt;/code&gt; locations.&lt;/li&gt;
&lt;li&gt;Subject &lt;code&gt;admin&lt;/code&gt; will have the &lt;code&gt;users:delete&lt;/code&gt; and &lt;code&gt;users:create&lt;/code&gt; permissions everywhere (no location restriction).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;guest&lt;/code&gt; application-role will be attributed to every identified subject.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;Access policy enforcement is achieved by using the Seed security API to protect specific sections of the application code.
Any code can be secured, although restrictions may apply in some cases.&lt;/p&gt;

&lt;h2 id=&#34;enforcement-strategy&#34;&gt;Enforcement strategy&lt;/h2&gt;

&lt;p&gt;It is recommended to follow a well-defined strategy in placing security checks in application code. Failing to do so may
lead to unexpected security holes, as &lt;em&gt;one missing or incomplete check may be enough to compromise the entire application&lt;/em&gt;.
Any well thought-out strategy will do, but you can consider applying one of the following (or both):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entry-point security&lt;/strong&gt;. This strategy consists in only securing the code that allow to interact with the application.
This includes REST resources, servlets and filters, Web-Services, administrative commands, etc&amp;hellip; Any applicative code
can theoretically only be reached through one of these entry points, so this strategy may be enough for most
applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-depth security&lt;/strong&gt;. This strategy consists in independently securing each application behavior, regardless of its
depth in the call hierarchy. This includes all the entry points of the previous strategy as well as services, repositories,
finders, etc&amp;hellip; It ensures that no behavior can be executed without the appropriate authorizations, regardless how it is
accessed. This strategy provides higher security, especially in applications with a lot of entry points or when entry
points are often modified, but is costlier to implement. This cost can be mitigated by limiting the checks to critical
application behavior only.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;annotation-based-checks&#34;&gt;Annotation-based checks&lt;/h2&gt;

&lt;p&gt;There are two annotations that checks for authorizations before allowing method execution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RequiresRoles&lt;/code&gt; which checks that the current subject has one or more role(s) before allowing to execute the method.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RequiresPermissions&lt;/code&gt; which checks that the current subject has one or more permission(s) before allowing to execute
the method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the security check fails, an exception of type &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;security.&amp;amp;#8203;AuthorizationException&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/security/AuthorizationException.html&#39;&gt;AuthorizationException&lt;/a&gt;&lt;/code&gt;
is thrown.&lt;/p&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Note that these annotation-based security checks are implemented with &lt;strong&gt;method interception&lt;/strong&gt; and are subject to
&lt;strong&gt;&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/#method-interception&#34;&gt;its limitations&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RequiresRoles(&amp;quot;administrator&amp;quot;)
public void deleteUser(User user) {
    // This method is executed only if current subject has role &#39;administrator&#39;
    // When not, an AuthorizationException is thrown
}

@RequiresPermissions(&amp;quot;account:create&amp;quot;)
public void createAccount(Account account) {
    // This method is executed only if current subject has permission &#39;account:create&#39;
    // When not, an AuthorizationException is thrown
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;programmatic-checks&#34;&gt;Programmatic checks&lt;/h2&gt;

&lt;p&gt;If annotation-based security checks cannot be used, or if an programmatic style is preferred, the
&lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;security.&amp;amp;#8203;SecuritySupport&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/security/SecuritySupport.html&#39;&gt;SecuritySupport&lt;/a&gt;&lt;/code&gt; facade can be used. It provides various methods to explicitly check for
current subject authorizations. It is more versatile than annotation-based checks and it is required when checking
dynamically generated authorizations. To use it, simply inject it where needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
private SecuritySupport securitySupport;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if the current subject, if any, is authenticated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (securitySupport.isAuthenticated()) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if the current subject, if any, has a specific role:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (securitySupport.hasRole(&amp;quot;jedi&amp;quot;)) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if the current subject, if any, has a specific permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (securitySupport.isPermitted(&amp;quot;jediCouncil:attend&amp;quot;)) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;There are multiple variations for each of these methods, and many more possibilities. Please refer to the
&lt;a href=&#34;http://seedstack.org/archives/16.7/javadoc/org/seedstack/seed/security/api/SecuritySupport.html&#34;&gt;javadoc&lt;/a&gt; for more information.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;other-checks&#34;&gt;Other checks&lt;/h2&gt;

&lt;p&gt;Seed security can provide additional ways to verify security depending on the technology used to access the application.
For instance, in a Web application, HTTP requests can be filtered to execute security tasks or checks. For more information
about applying HTTP security filtering, refer to &lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/web/#security&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;access-subject-principals&#34;&gt;Access subject principals&lt;/h2&gt;

&lt;p&gt;Note that &lt;code&gt;SecuritySupport&lt;/code&gt; provides access to current subject Principals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Get current subject id
securitySupport.getSimplePrincipalByName(Principals.IDENTITY).getValue();

// Get current subject first name, if any
securitySupport.getSimplePrincipalByName(Principals.FIRST_NAME).getValue();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;extension&#34;&gt;Extension&lt;/h1&gt;

&lt;p&gt;As Seed security is based on &lt;a href=&#34;http://shiro.apache.org&#34;&gt;Apache Shiro&lt;/a&gt;, it can be extended by adding existing Shiro components
or by writing your own components. Seed also provides SPI to extend its own security features.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-realm&#34;&gt;Creating a Realm&lt;/h2&gt;

&lt;p&gt;You can create a custom Realm by following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class that implements &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;apache.&amp;amp;#8203;shiro.&amp;amp;#8203;realm.&amp;amp;#8203;Realm&#39;&gt;Realm&lt;/span&gt;&lt;/code&gt; or extends an existing Shiro realm.&lt;/li&gt;
&lt;li&gt;Use the realm class simple name as the realm name in the application configuration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-a-rolepermissionresolver&#34;&gt;Creating a RolePermissionResolver&lt;/h2&gt;

&lt;p&gt;You can create a custom Role/Permission resolver by following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class that implements &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;apache.&amp;amp;#8203;shiro.&amp;amp;#8203;authz.&amp;amp;#8203;permission.&amp;amp;#8203;RolePermissionResolver&#39;&gt;RolePermissionResolver&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Declare you want to use it on a realm in your properties.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-a-rolemapping&#34;&gt;Creating a RoleMapping&lt;/h2&gt;

&lt;p&gt;You can create a custom Role mapping by following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class that implements &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;support.&amp;amp;#8203;security.&amp;amp;#8203;core.&amp;amp;#8203;authorization.&amp;amp;#8203;RoleMapping&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/support/security/core/authorization/RoleMapping.html&#39;&gt;RoleMapping&lt;/a&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Declare you want to use it on a realm in your properties.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;Testing the security model and its implementation is crucial to ensure effective security. This can be easily done with
Seed through specific integration tests. For a general overview of integration testing, please check
&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/testing/&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuration-1&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;You can choose to fully emulate your security infrastructure, for instance by using an LDAP test directory instead of the
real one. The main benefit of this approach is that it tests the security effectiveness as closely as possible to the
real environment. A simpler but still adequate approach is to override the security realm configuration to use a
&lt;code&gt;ConfigurationRealm&lt;/code&gt; and define test users in application configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[org.seedstack.seed.security.users]
testUser1 = password, role1, role2
testUser2 = password, role1
testUser3 = password, role3
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about the Configuration realm, refer to &lt;a href=&#34;#configuration-realm&#34;&gt;this section&lt;/a&gt;.
For more information on how to override the configuration for testing, refer to &lt;a href=&#34;#override&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;subject-authentication&#34;&gt;Subject authentication&lt;/h2&gt;

&lt;p&gt;To authenticate a subject before a test method is executed, use the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;security.&amp;amp;#8203;WithUser&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/security/WithUser.html&#39;&gt;@WithUser&lt;/a&gt;&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RunWith(SeedITRunner.class)
public class MyITWithSecurity {
    @Inject
    private SecuritySupport securitySupport;

    @Inject
    private MySecuredService mySecuredService;


    @Test(expected = AuthorizationException)
    @WithUser(id = &amp;quot;testUser1&amp;quot;, password = &amp;quot;password&amp;quot;)
    public void unprivileged_user_cannot_access_secured_service() {
        mySecuredService.securedMethod();
        fail(&amp;quot;securedMethod() shouldn&#39;t have been called&amp;quot;);
    }

    @Test
    @WithUser(id = &amp;quot;testUser3&amp;quot;, password = &amp;quot;password&amp;quot;)
    public void admin_user_is_allowed_to_access_secured_service() {
        mySecuredService.securedMethod();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;data-security&#34;&gt;Data security&lt;/h1&gt;

&lt;p&gt;The goal of the security on data is to protect the data exposed by an application. It has the ability to obfuscate any
attribute of any object that does not pass the security restriction defined on it. For instance, an account number
&lt;code&gt;79927391338710&lt;/code&gt; can be transformed into &lt;code&gt;799273******10&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;restriction-annotation&#34;&gt;@Restriction annotation&lt;/h2&gt;

&lt;p&gt;This annotation can be applied on any class attribute. The field value will be obfuscated when data security will be applied:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MySecuredPojo {
    @Restriction(value = &amp;quot;${ hasRole(&#39;manager&#39;) }&amp;quot;, obfuscation = AccountObfuscationHandler.class)
    private String accountNumber;

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value of the annotation is a security expression (see &lt;a href=&#34;#security-expressions&#34;&gt;this section&lt;/a&gt; for more details). If it
evaluates to false against the current Subject the field will be obfuscated according to the &lt;code&gt;DataObfuscationHandler&lt;/code&gt;
specified (see &lt;a href=&#34;#dataobfuscationhandler&#34;&gt;this section&lt;/a&gt; for more details). The default obfuscation handler nullifies the
field.&lt;/p&gt;

&lt;h2 id=&#34;data-security-service&#34;&gt;Data security service&lt;/h2&gt;

&lt;p&gt;The security on data can be applied by using the &lt;code&gt;DataSecurityService&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Inject
private DataSecurityService dataSecurityService;

dataSecurityService.secure(myDto);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This service will go recursively through the object fields and look for restrictions. Each restriction that evaluates to f
alse against the current Subject will trigger the obfuscation of its associated field.&lt;/p&gt;

&lt;h2 id=&#34;secured-annotation&#34;&gt;@Secured annotation&lt;/h2&gt;

&lt;p&gt;You can add a &lt;code&gt;@Secured&lt;/code&gt; annotation on any method parameter to automatically apply data security on it. You can also
apply the &lt;code&gt;@Secured&lt;/code&gt; annotation directly on the method to apply data security on the return value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Secured
public SecuredPojo1 securedMethod(@Secured SecuredPojo2 securedPojo2) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every method annotated with &lt;code&gt;@Secured&lt;/code&gt; or with the annotation applied to at least one of its parameters will be intercepted
and the relevant objects will be secured. Note that the
&lt;a href=&#34;http://seedstack.org/archives/16.7/docs/seed/manual/#dependency-injection&#34;&gt;usual interception limitations&lt;/a&gt; apply.&lt;/p&gt;

&lt;div class=&#34;callout callout-warning&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
            
                &lt;i class=&#34;fa fa-exclamation-triangle icon-2x&#34;&gt;&lt;/i&gt;
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Please note that the data security interceptor will inspect the whole object graph starting from the secured object, so
you may encounter some performance penalty depending on its size. It shouldn&amp;rsquo;t be a problem for typical use.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;security-expressions&#34;&gt;Security expressions&lt;/h2&gt;

&lt;p&gt;Security expressions are strings that respect the &lt;a href=&#34;https://uel.java.net/&#34;&gt;Unified Expression Language (UEL)&lt;/a&gt; syntax. The
following methods are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hasRole(String role)&lt;/code&gt;. Returns true if the current subject has the specified role, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasOneRole(String... roles)&lt;/code&gt;. Returns true if the current subject has at least one of the specified roles, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasAllRoles(String... roles)&lt;/code&gt;. Returns true if the current subject has all the specified roles, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasRole(String role, String... scopes)&lt;/code&gt;. Returns true if the current subject has the specified role for all the specified scopes, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasPermission(String permission)&lt;/code&gt;. Returns true if the current subject has the specified permission, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasOnePermission(String... permissions)&lt;/code&gt;. Returns true if the current subject has at least one of the specified permissions, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasAllPermissions(String... permissions)&lt;/code&gt;. Returns true if the current subject has all the specified permissions, false otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasPermission(String permission, String... scopes)&lt;/code&gt;. Returns true if the current subject has the specified permission on the specified scopes, false otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;${ !hasRole(&#39;manager&#39;) &amp;amp;&amp;amp; hasPermission(&#39;salary:view&#39;) }
${ hasAllPermissions(&#39;salary:view&#39;, &#39;salary:update&#39;) }
${ hasPermission(&#39;users:manage&#39;, &#39;FR&#39;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More resources on EL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html&#34;&gt;Oracle tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://uel.java.net/&#34;&gt;Unified Expression Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dataobfuscationhandler&#34;&gt;DataObfuscationHandler&lt;/h2&gt;

&lt;p&gt;The goal of a &lt;code&gt;DataObfuscationHandler&lt;/code&gt; is to obfuscate data with a specific algorithm.
For instance, it could take a name, eg. &amp;laquo;Doe&amp;raquo; and return an anonymised name &amp;laquo;D.&amp;raquo;. This would be implemented as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * This {@code DataObfuscationHandler} takes a {@code String}, eg. &amp;quot;Doe&amp;quot; and
 * obfuscate it into &amp;quot;D.&amp;quot;.
 */
public static class NameObfuscationHandler implements DataObfuscationHandler&amp;lt;String&amp;gt; {
    @Override
    public String obfuscate(String data) {
        String result = &amp;quot;&amp;quot;;
        if (data != null &amp;amp;&amp;amp; data.length() &amp;gt; 0) {
            result = data.charAt(0) + &amp;quot;.&amp;quot;;
            result = result.toUpperCase();
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-annotations&#34;&gt;Custom annotations&lt;/h2&gt;

&lt;p&gt;Custom restriction annotations can be defined and registered with data security by defining a &lt;code&gt;DataSecurityHandler&lt;/code&gt;. Start
with defining a custom annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.FIELD})
public @interface MyRestriction {

    String expression();

    Todo todo() default Todo.Nullify;

    public enum Todo {
        Hide, Round, Nullify
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, define a &lt;code&gt;DataSecurityHandler&lt;/code&gt; which handles the &lt;code&gt;@MyRestriction&lt;/code&gt; annotation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyDataSecurityHandler implements DataSecurityHandler&amp;lt;MyRestriction&amp;gt; {

    @Override
    public Object securityExpression(MyRestriction annotation) {
        return annotation.expression();
    }

    @Override
    public Class&amp;lt;? extends DataObfuscationHandler&amp;lt;?&amp;gt;&amp;gt; securityObfuscationHandler(
                                                                MyRestriction annotation) {    
        if (annotation.todo() .equals( Todo.Round  )) {
            // Uses the rounding obfuscation handler defined below
            return RoundingObfuscationHandler.class;
        }

        if (annotation.todo() .equals( Todo.Hide  )) {
            // Uses the name obfuscation handler defined in the previous section
            return NameObfuscationHandler.class;
        }

        return null;
    }

    public static class RoundingObfuscationHandler 
                        implements DataObfuscationHandler&amp;lt;Integer&amp;gt; {

        @Override
        public Integer obfuscate(Integer data) {
            Integer result = 0;
            if (data != null) {
                result = (int) (Math.ceil(data / 1000) * 1000);
            }
            return result;
        }           
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can apply the annotation on a POJO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyPojo {       

    private String firstName;

    @MyRestriction(expression=&amp;quot;${1 == 2}&amp;quot; , todo = Todo.Hide)
    private String name;

    @MyRestriction(
        expression=&amp;quot;${ hasRole(&#39;manager&#39;) }&amp;quot;, 
        todo=Todo.Round
    )
    private Integer salary;

    @MyRestriction(expression=&amp;quot;${false}&amp;quot;)
    private String password;

    public MyPojo(String name, String firstName, String password, Integer salary) {
        this.name = name;
        this.firstName = firstName;
        this.password = password;
        this.salary = salary;
    }

    ...     
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/testing/</guid>
      <description>&lt;p&gt;Seed offers various tools to facilitate the writing of your tests in the &lt;code&gt;seed-testing&lt;/code&gt; module, notably a JUnit test runner
for integration testing. This runner handles kernel startup and shutdown as well as injection of test classes. It can also
detect and activate Seed test plugins which augment the test behavior. For instance the Seed security test plugin can
login a predefined user based on an annotation.&lt;/p&gt;

&lt;p&gt;To use Seed testing tools, add the &lt;code&gt;seed-testing&lt;/code&gt; module in your test classpath. 




    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-testing-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-testing-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-testing-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-testing&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-testing-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-testing-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-testing-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-testing-version, #org-seedstack-seed-seed-testing-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-testing-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-testing-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    testCompile(&#34;org.seedstack.seed:seed-testing:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;supported-test-typologies&#34;&gt;Supported test typologies&lt;/h1&gt;

&lt;p&gt;Seed testing tools are based upon the popular &lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt; testing framework.&lt;/p&gt;

&lt;h2 id=&#34;unit-tests&#34;&gt;Unit tests&lt;/h2&gt;

&lt;p&gt;The purpose of unit tests is to take a small and testable part of a program, isolate it from any dependency (injection,
databases, network, file system, &amp;hellip;) by mocking them and check whether it behaves exactly as expected. The main goal is
to validate code quality and reliability.&lt;/p&gt;

&lt;p&gt;Seed doesn&amp;rsquo;t help much when writing unit tests beyond packaging a few high-quality test libraries, such as
&lt;a href=&#34;http://joel-costigliola.github.io/assertj/&#34;&gt;AssertJ&lt;/a&gt; or &lt;a href=&#34;http://mockito.org/&#34;&gt;Mockito&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;integration-tests&#34;&gt;Integration tests&lt;/h2&gt;

&lt;p&gt;The purpose of integration tests is to pick multiple components together and test them as a whole. Integration tests can
range from a testing a simple operation involving two classes to an entire application setup with all its dependencies
(databases, file system, network, &amp;hellip;).&lt;/p&gt;

&lt;p&gt;Their main goal is to detect issues appearing when components interact with each other. Integration tests can be
used to validate technical behavior, such as the correct operation of a group of components, or can extend beyond to verify
the global program behavior in regard to functional expectations. In this latter case, it is often useful to supplement
Seed testing tools with a framework for Behavior-Driven-Development (BDD) like &lt;a href=&#34;http://jbehave.org/&#34;&gt;JBehave&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;simple-integration-tests&#34;&gt;Simple integration tests&lt;/h1&gt;

&lt;p&gt;When a Web container is not required, you can simply use the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;it.&amp;amp;#8203;SeedITRunner&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/it/SeedITRunner.html&#39;&gt;SeedITRunner&lt;/a&gt;&lt;/code&gt; JUnit runner on your
test class. Alternatively you can also extend the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;it.&amp;amp;#8203;AbstractSeedIT&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/it/AbstractSeedIT.html&#39;&gt;AbstractSeedIT&lt;/a&gt;&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyComponentIT extends AbstractSeedIT {
    @Inject
    MyService myService;

    @Test
    public void my_service_is_injectable() {
        Assertions.assertThat(myService).isNotNull();
    }       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test class itself is instantiated by Seed injector and benefit from dependency injection and AOP interception.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;A different kernel is used for each test class. All test methods within a test class are invoked in the context
of its kernel. After all test methods are completed, the kernel is shutdown. This behavior can be altered manually or
automatically by test plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-tips&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
                &lt;i class=&#34;fa fa-lightbulb-o icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;Simple integration tests run faster than Web integration tests are simpler to maintain. They should be preferred when
Web testing is not necessary and be supplemented with the minimal amount of Web integration tests.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;altering-kernel-mode&#34;&gt;Altering kernel mode&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;testing-with-security&#34;&gt;Testing with security&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;testing-command-line-applications&#34;&gt;Testing command-line applications&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;web-integration-tests&#34;&gt;Web integration tests&lt;/h1&gt;

&lt;p&gt;Seed provides an &lt;a href=&#34;http://arquillian.org/&#34;&gt;Arquillian&lt;/a&gt; integration for Web application testing. These kind of integration
tests allow to programmatically define the deployed Web archive (WAR) and test it either from server-side or from client-side.
You can use the &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;jboss.&amp;amp;#8203;arquillian.&amp;amp;#8203;junit.&amp;amp;#8203;Arquillian&#39;&gt;Arquillian&lt;/span&gt;&lt;/code&gt; runner directly on your test class. Alternatively you can extend
the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;it.&amp;amp;#8203;AbstractSeedWebIT&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/it/AbstractSeedWebIT.html&#39;&gt;AbstractSeedWebIT&lt;/a&gt;&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyComponentIT extends AbstractSeedWebIT {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To specify the deployed artifact, declare a public static method annotated with &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;jboss.&amp;amp;#8203;arquillian.&amp;amp;#8203;container.&amp;amp;#8203;test.&amp;amp;#8203;api.&amp;amp;#8203;Deployment&#39;&gt;@Deployment&lt;/span&gt;&lt;/code&gt;
that returns a &lt;code&gt;&lt;span data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;jboss.&amp;amp;#8203;shrinkwrap.&amp;amp;#8203;api.&amp;amp;#8203;spec.&amp;amp;#8203;WebArchive&#39;&gt;WebArchive&lt;/span&gt;&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RestIT extends AbstractSeedWebIT {
    @Inject
    MyService myService; 

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap
            .create(WebArchive.class)
            .addAsResource(
                &amp;quot;my-conf.props&amp;quot;, 
                &amp;quot;META-INF/configuration/my-conf.props&amp;quot;
            );
    }

    @Test
    public void my_service_is_injectable() {
        Assertions.assertThat(myService).isNotNull();
    }

    @RunAsClient
    @Test
    public void my_rest_resource_is_working(@ArquillianResource URL baseURL) {
        expect().statusCode(200).when().get(baseURL.toString() + &amp;quot;rest/my-resource&amp;quot;);
    }       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test class itself is NOT instantiated by Seed injector and, as such, cannot benefit from AOP interception. It benefits
from dependency injection though.&lt;/li&gt;
&lt;li&gt;The kernel is started via the Web application listener, automatically registered (no need for a &lt;code&gt;web.xml&lt;/code&gt; file although one can be specified). A unique kernel is used for all test methods. This behavior cannot be altered.&lt;/li&gt;
&lt;li&gt;The first test method, named &lt;code&gt;my_service_is_injectable()&lt;/code&gt;, is a server-side test. It can test if injected dependencies,
like a service of the Web application here, are working correctly.&lt;/li&gt;
&lt;li&gt;The second test method, named &lt;code&gt;my_rest_resource_is_working()&lt;/code&gt;, is a client-side test. It is executed in a separate
thread and can invoke the deployed Web application through the URL provided by the
&lt;code&gt;@org.jboss.arquillian.test.api.ArquillianResource&lt;/code&gt; annotated parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;callout callout-info&#34;&gt;
    &lt;div style=&#34;display:table; width: 100%&#34;&gt;
        &lt;div style=&#34;display:table-cell; width: 50px; vertical-align: middle;&#34;&gt;
            
            
                &lt;i class=&#34;fa fa-info-circle icon-2x&#34; style=&#34;line-height: 30px;&#34;&gt;&lt;/i&gt;
            
            
            
        &lt;/div&gt;
        &lt;div style=&#34;display:table-cell; vertical-align: middle;&#34;&gt;
            &lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;Apache Tomcat&lt;/a&gt; is the default test server configured. You can override this choice by specifying
a custom &lt;code&gt;arquillian.xml&lt;/code&gt; file at the root of the classpath. Arquillian provides many more features than described in
this section. For more information about Arquillian, visit the &lt;a href=&#34;http://arquillian.org/&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;maven-settings&#34;&gt;Maven settings&lt;/h1&gt;

&lt;p&gt;It is often useful to separate integration tests and unit tests into different source folders. If you use Maven your can
do so by adding the following configuration to your project root &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;build&amp;gt;
  &amp;lt;testResources&amp;gt;
    &amp;lt;testResource&amp;gt;
      &amp;lt;directory&amp;gt;src/it/resources&amp;lt;/directory&amp;gt;
    &amp;lt;/testResource&amp;gt;
    &amp;lt;testResource&amp;gt;
      &amp;lt;directory&amp;gt;src/test/resources&amp;lt;/directory&amp;gt;
    &amp;lt;/testResource&amp;gt;
  &amp;lt;/testResources&amp;gt;
  &amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
      &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
          &amp;lt;id&amp;gt;execute-integration-tests&amp;lt;/id&amp;gt;
          &amp;lt;phase&amp;gt;integration-test&amp;lt;/phase&amp;gt;
          &amp;lt;goals&amp;gt;
            &amp;lt;goal&amp;gt;integration-test&amp;lt;/goal&amp;gt;
          &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
        &amp;lt;execution&amp;gt;
          &amp;lt;id&amp;gt;verify-integration-tests&amp;lt;/id&amp;gt;
          &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;
          &amp;lt;goals&amp;gt;
            &amp;lt;goal&amp;gt;verify&amp;lt;/goal&amp;gt;
          &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
      &amp;lt;/executions&amp;gt;
    &amp;lt;/plugin&amp;gt;
    &amp;lt;plugin&amp;gt;
      &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
      &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
          &amp;lt;id&amp;gt;add-it-sources&amp;lt;/id&amp;gt;
          &amp;lt;phase&amp;gt;generate-test-sources&amp;lt;/phase&amp;gt;
          &amp;lt;goals&amp;gt;
            &amp;lt;goal&amp;gt;add-test-source&amp;lt;/goal&amp;gt;
          &amp;lt;/goals&amp;gt;
          &amp;lt;configuration&amp;gt;
            &amp;lt;sources&amp;gt;
              &amp;lt;source&amp;gt;src/it/java&amp;lt;/source&amp;gt;
            &amp;lt;/sources&amp;gt;
          &amp;lt;/configuration&amp;gt;
        &amp;lt;/execution&amp;gt;
      &amp;lt;/executions&amp;gt;
    &amp;lt;/plugin&amp;gt;
  &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>http://seedstack.org/archives/16.7/docs/seed/manual/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://seedstack.org/archives/16.7/docs/seed/manual/transactions/</guid>
      <description>&lt;p&gt;Seed transaction management allows interactions between the application code and one or more external resource(s) to be
done transactionally (ie. in an all-or-nothing paradigm). It is used in conjunction with other supports handling external
resources such as persistence or messaging. For more detail about transactions, refer to this &lt;a href=&#34;http://en.wikipedia.org/wiki/Transaction_processing&#34;&gt;wikipedia page&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;dependency&#34;&gt;Dependency&lt;/h1&gt;

&lt;p&gt;To enable transactions in your project, add the &lt;code&gt;seed-transaction&lt;/code&gt; module to your classpath.&lt;/p&gt;






    
        
            
        
    

&lt;div class=&#34;tab-v2&#34;&gt;
    &lt;ul class=&#34;nav nav-tabs&#34;&gt;
        &lt;li class=&#34;active&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-transaction-maven&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&#34;&#34;&gt;&lt;a href=&#34;#tab-org-seedstack-seed-seed-transaction-gradle&#34; data-toggle=&#34;tab&#34; aria-expanded=&#34;true&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;span class=&#34;tabs-icon fa-2x fa fa-cubes pull-right&#34;&gt;&lt;/span&gt;
    &lt;div class=&#34;clear-both&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        &lt;div class=&#34;tab-pane in active&#34; id=&#34;tab-org-seedstack-seed-seed-transaction-maven&#34;&gt;
            &lt;pre style=&#34;margin-top: 0;&#34;&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.seedstack.seed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;seed-transaction&amp;lt;/artifactId&amp;gt;&lt;span id=&#34;org-seedstack-seed-seed-transaction-version&#34; style=&#34;display: none;&#34;&gt;
    &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
            &lt;small class=&#34;pull-right&#34; style=&#34;color: #aaa; margin-top: -20px; margin-right: 5px;&#34;&gt;
                &lt;span id=&#34;org-seedstack-seed-seed-transaction-warn&#34; style=&#34;display: none;&#34;&gt;&lt;i class=&#34;fa fa-warning&#34; style=&#34;color: orange;&#34;&gt;&lt;/i&gt; Specifying versions manually is error-prone, use the &lt;a href=&#34;http://seedstack.org/archives/16.7/getting-started/distribution&#34;&gt;distribution&lt;/a&gt; instead.&lt;/span&gt;
                &lt;a style=&#34;cursor: pointer;&#34; id=&#34;org-seedstack-seed-seed-transaction-show&#34; onclick=&#34;$(&#39;#org-seedstack-seed-seed-transaction-version, #org-seedstack-seed-seed-transaction-warn&#39;).show(); $(&#39;#org-seedstack-seed-seed-transaction-show&#39;).hide();&#34;&gt;Show version&lt;/a&gt;
            &lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&#34;tab-pane in&#34; id=&#34;tab-org-seedstack-seed-seed-transaction-gradle&#34;&gt;
            &lt;pre style=&#34;margin-bottom: 0;&#34;&gt;&lt;code class=&#34;java&#34;&gt;dependencies {
    compile(&#34;org.seedstack.seed:seed-transaction:2.3.0&#34;)
}&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Note that this dependency is rarely explicitly required as it is transitively provided by any transaction-capable add-on
like JPA persistence, JMS, &amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;transaction-manager&#34;&gt;Transaction manager&lt;/h1&gt;

&lt;p&gt;The transaction manager is responsible for detecting transaction boundaries in the application code and wrap them with
an interceptor. This interceptor will then automatically create, commit or rollback and release a transaction when the
transactional code is invoked. The behavior of the transaction manager is heavily customizable depending on your business requirement.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;A Seed application can have &lt;strong&gt;only one&lt;/strong&gt; transaction manager. The transaction manager is specified with following configuration property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.seedstack.seed.transaction.transaction-manager = fully.qualified.name.of.TransactionManagerClass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;local-transaction-manager&#34;&gt;Local transaction manager&lt;/h2&gt;

&lt;p&gt;The local transaction manager manages transactions within the application. It cannot handle global transactions managed
by an external transaction monitor like a J2EE Web server and doesn&amp;rsquo;t support spanning transactions over multiple
resources. However it is very lightweight and adequate for most common applications uses. This is the default transaction
manager.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.seedstack.seed.transaction.transaction-manager = org.seedstack.seed.transaction.internal.LocalTransactionManager
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jta-transaction-manager&#34;&gt;JTA transaction manager&lt;/h2&gt;

&lt;p&gt;The JTA transaction manager integrates code demarcated with Seed transactions with any external JTA-compliant transaction
monitor such as ones found in J2EE Web servers. To use it, just specify the following configuration property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.seedstack.seed.transaction.transaction-manager = org.seedstack.seed.transaction.internal.JtaTransactionManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some supports may need additional configuration to be able to participate in a JTA transaction.&lt;/p&gt;

&lt;h1 id=&#34;transaction-metadata&#34;&gt;Transaction metadata&lt;/h1&gt;

&lt;p&gt;Transactions have several attributes that define their behavior and outcome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Propagation&lt;/strong&gt; determines if a new transaction should be started and/or how an existing transaction should be handled, if any. Possible values are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;REQUIRED&lt;/code&gt;: use existing transaction or create a new one if none exists. &lt;strong&gt;It is the default value.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REQUIRES_NEW&lt;/code&gt;: create a new transaction and suspend the previous one if any exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MANDATORY&lt;/code&gt;: throw an exception if no existing transaction is found.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUPPORTS&lt;/code&gt;: execute code outside any transaction if no existing transaction is found.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT_SUPPORTED&lt;/code&gt;: execute code outside any transaction and suspend the current transaction if one exists.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NEVER&lt;/code&gt;: execute code outside any transaction and throw an exception if an existing transaction is found.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rollback&lt;/strong&gt; behavior is defined:

&lt;ul&gt;
&lt;li&gt;a list of exception classes triggering a rollback if thrown from transactional code (default is &lt;code&gt;java.lang.Exception&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a list of exception classes that will NOT trigger a rollback if thrown from transactional code (default value is empty).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;readOnly&lt;/strong&gt; attribute determines if a transaction is read-only or not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rollbackOnParticipationFailure&lt;/strong&gt; attribute determines if a participating method should mark the transaction as rollback-only if an error occurs.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;transaction handler&lt;/strong&gt; will interact with the transacted resource(s).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource identifier&lt;/strong&gt; is required when multiple resources are handled by the same transaction handler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These attributes are called transaction metadata and default values can be overridden explicitly or by inferred
values from transaction metadata resolvers. &lt;strong&gt;The explicitly specified values always take precedence over the automatically
inferred ones, which in turn always take precedence over the default ones.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;demarcation-via-annotation&#34;&gt;Demarcation via annotation&lt;/h1&gt;

&lt;p&gt;Transaction metadata can be explicitly specified through &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;Transactional&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/Transactional.html&#39;&gt;@Transactional&lt;/a&gt;&lt;/code&gt; annotation and associated annotations (for
each type of transactional resource). These annotations can be placed on methods, classes, interfaces and other annotations.
The search for the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;Transactional&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/Transactional.html&#39;&gt;@Transactional&lt;/a&gt;&lt;/code&gt; annotation starts for all methods of any Seed managed class, using the following order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The method and any annotation on this method,&lt;/li&gt;
&lt;li&gt;The declaring class and any annotation on this class,&lt;/li&gt;
&lt;li&gt;Any superclass or interface up in the hierarchy, with the following sub-order for each class/interface:

&lt;ul&gt;
&lt;li&gt;The overridden method and any annotation on this method,&lt;/li&gt;
&lt;li&gt;The class/interface and any annotation on this class.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If no &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;Transactional&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/Transactional.html&#39;&gt;@Transactional&lt;/a&gt;&lt;/code&gt; annotation is found when the top of the class hierarchy is reached, the method is not transactional
and not intercepted at all.&lt;/p&gt;

&lt;h1 id=&#34;automatic-metadata-resolution&#34;&gt;Automatic metadata resolution&lt;/h1&gt;

&lt;p&gt;Transaction metadata resolvers are means of automatically determining transaction metadata for a specific context. A
transaction metadata resolver must implement &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;spi.&amp;amp;#8203;TransactionMetadataResolver&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/spi/TransactionMetadataResolver.html&#39;&gt;TransactionMetadataResolver&lt;/a&gt;&lt;/code&gt; interface
and provide a default constructor. They are scanned and registered at application startup and queried &lt;strong&gt;in no predefined
order&lt;/strong&gt; at the beginning of method interception. Since they are queried inside the transaction interceptor,
&lt;strong&gt;an explicit transaction demarcation has to be present&lt;/strong&gt; in the first place. They cannot add behavior to not
demarcated code.&lt;/p&gt;

&lt;h2 id=&#34;resolving&#34;&gt;Resolving&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;resolve()&lt;/code&gt; method is called on each resolver with the intercepted method as parameter. Its return is Return is either an instance
of &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;spi.&amp;amp;#8203;TransactionMetadata&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/spi/TransactionMetadata.html&#39;&gt;TransactionMetadata&lt;/a&gt;&lt;/code&gt; with the inferred attributes set ot &lt;code&gt;null&lt;/code&gt; when nothing can be inferred.
inferred attributes set.&lt;/p&gt;

&lt;p&gt;Seed provides a built-in always active resolver which automatically associate the transaction handler if only
one is available. In this case, it is not necessary to explicitly specify the corresponding transaction handler.&lt;/p&gt;

&lt;p&gt;Other Seed modules can register their own resolvers that will infer more transaction metadata for specific contexts. For
instance the JMS add-on can automatically detect the transacted resource when the &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;Transactional&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/Transactional.html&#39;&gt;@Transactional&lt;/a&gt;&lt;/code&gt; annotation is used
inside a JMS listener. More documentation is available in modules where this is applicable.&lt;/p&gt;

&lt;p&gt;Remember that an explicitly specified &lt;code&gt;&lt;a data-toggle=&#34;tooltip&#34; data-html=&#34;true&#34; title=&#39;org.&amp;amp;#8203;seedstack.&amp;amp;#8203;seed.&amp;amp;#8203;transaction.&amp;amp;#8203;Transactional&#39; href=&#39;http://seedstack.org/javadoc/org/seedstack/seed/transaction/Transactional.html&#39;&gt;@Transactional&lt;/a&gt;&lt;/code&gt; annotation will always override any automatically resolved metadata.&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&#34;with-an-explicit-jms-resource&#34;&gt;With an explicit JMS resource&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;@Transactional
@JmsConnection(&amp;quot;connection1&amp;quot;)
public void send(String stringMessage) throws JMSException {
    Destination queue = session.createQueue(&amp;quot;queue1&amp;quot;);
    TextMessage message1 = session.createTextMessage();
    message1.setText(stringMessage);
    MessageProducer producer = session.createProducer(queue);
    producer.send(message1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;with-an-explicit-jpa-resource&#34;&gt;With an explicit JPA resource&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;@Inject
Item1Repository item1Repository;

@Transactional
@JpaUnit(&amp;quot;unit1&amp;quot;)
public void save() throws Exception {
    Item1 item1 = new Item1();
    item1.setName(&amp;quot;item1Name&amp;quot;);
    item1Repository.save(item1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;with-an-implicit-resource&#34;&gt;With an implicit resource&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;@Inject
Item1Repository item1Repository;

@Transactional
public void save() throws Exception {
    Item1 item1 = new Item1();
    item1.setName(&amp;quot;item1Name&amp;quot;);
    item1Repository.save(item1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;JPA resource is assumed since it is the only resource available.&lt;/li&gt;
&lt;li&gt;JpaUnit is assumed since only one is defined.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>